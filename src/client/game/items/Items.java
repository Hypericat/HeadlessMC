package client.game.items;

import client.game.items.component.*;

import java.util.HashMap;
import java.util.List;

public class Items {
    private static final HashMap<String, ItemType> map = new HashMap<>();

    public static ItemType ACACIA_BOAT = register(new ItemType("acacia_boat", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType ACACIA_BUTTON = register(new ItemType("acacia_button", Component.getBuilder().build()));
    public static ItemType ACACIA_CHEST_BOAT = register(new ItemType("acacia_chest_boat", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType ACACIA_DOOR = register(new ItemType("acacia_door", Component.getBuilder().build()));
    public static ItemType ACACIA_FENCE = register(new ItemType("acacia_fence", Component.getBuilder().build()));
    public static ItemType ACACIA_FENCE_GATE = register(new ItemType("acacia_fence_gate", Component.getBuilder().build()));
    public static ItemType ACACIA_HANGING_SIGN = register(new ItemType("acacia_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType ACACIA_LEAVES = register(new ItemType("acacia_leaves", Component.getBuilder().build()));
    public static ItemType ACACIA_LOG = register(new ItemType("acacia_log", Component.getBuilder().build()));
    public static ItemType ACACIA_PLANKS = register(new ItemType("acacia_planks", Component.getBuilder().build()));
    public static ItemType ACACIA_PRESSURE_PLATE = register(new ItemType("acacia_pressure_plate", Component.getBuilder().build()));
    public static ItemType ACACIA_SAPLING = register(new ItemType("acacia_sapling", Component.getBuilder().build()));
    public static ItemType ACACIA_SIGN = register(new ItemType("acacia_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType ACACIA_SLAB = register(new ItemType("acacia_slab", Component.getBuilder().build()));
    public static ItemType ACACIA_STAIRS = register(new ItemType("acacia_stairs", Component.getBuilder().build()));
    public static ItemType ACACIA_TRAPDOOR = register(new ItemType("acacia_trapdoor", Component.getBuilder().build()));
    public static ItemType ACACIA_WOOD = register(new ItemType("acacia_wood", Component.getBuilder().build()));
    public static ItemType ACTIVATOR_RAIL = register(new ItemType("activator_rail", Component.getBuilder().build()));
    public static ItemType AIR = register(new ItemType("air", Component.getBuilder().build()));
    public static ItemType ALLAY_SPAWN_EGG = register(new ItemType("allay_spawn_egg", Component.getBuilder().build()));
    public static ItemType ALLIUM = register(new ItemType("allium", Component.getBuilder().build()));
    public static ItemType AMETHYST_BLOCK = register(new ItemType("amethyst_block", Component.getBuilder().build()));
    public static ItemType AMETHYST_CLUSTER = register(new ItemType("amethyst_cluster", Component.getBuilder().build()));
    public static ItemType AMETHYST_SHARD = register(new ItemType("amethyst_shard", Component.getBuilder().build()));
    public static ItemType ANCIENT_DEBRIS = register(new ItemType("ancient_debris", Component.getBuilder().build()));
    public static ItemType ANDESITE = register(new ItemType("andesite", Component.getBuilder().build()));
    public static ItemType ANDESITE_SLAB = register(new ItemType("andesite_slab", Component.getBuilder().build()));
    public static ItemType ANDESITE_STAIRS = register(new ItemType("andesite_stairs", Component.getBuilder().build()));
    public static ItemType ANDESITE_WALL = register(new ItemType("andesite_wall", Component.getBuilder().build()));
    public static ItemType ANGLER_POTTERY_SHERD = register(new ItemType("angler_pottery_sherd", Component.getBuilder().build()));
    public static ItemType ANVIL = register(new ItemType("anvil", Component.getBuilder().build()));
    public static ItemType APPLE = register(new ItemType("apple", Component.getBuilder().build()));
    public static ItemType ARCHER_POTTERY_SHERD = register(new ItemType("archer_pottery_sherd", Component.getBuilder().build()));
    public static ItemType ARMADILLO_SCUTE = register(new ItemType("armadillo_scute", Component.getBuilder().build()));
    public static ItemType ARMADILLO_SPAWN_EGG = register(new ItemType("armadillo_spawn_egg", Component.getBuilder().build()));
    public static ItemType ARMOR_STAND = register(new ItemType("armor_stand", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType ARMS_UP_POTTERY_SHERD = register(new ItemType("arms_up_pottery_sherd", Component.getBuilder().build()));
    public static ItemType ARROW = register(new ItemType("arrow", Component.getBuilder().build()));
    public static ItemType AXOLOTL_BUCKET = register(new ItemType("axolotl_bucket", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType AXOLOTL_SPAWN_EGG = register(new ItemType("axolotl_spawn_egg", Component.getBuilder().build()));
    public static ItemType AZALEA = register(new ItemType("azalea", Component.getBuilder().build()));
    public static ItemType AZALEA_LEAVES = register(new ItemType("azalea_leaves", Component.getBuilder().build()));
    public static ItemType AZURE_BLUET = register(new ItemType("azure_bluet", Component.getBuilder().build()));
    public static ItemType BAKED_POTATO = register(new ItemType("baked_potato", Component.getBuilder().build()));
    public static ItemType BAMBOO = register(new ItemType("bamboo", Component.getBuilder().build()));
    public static ItemType BAMBOO_BLOCK = register(new ItemType("bamboo_block", Component.getBuilder().build()));
    public static ItemType BAMBOO_BUTTON = register(new ItemType("bamboo_button", Component.getBuilder().build()));
    public static ItemType BAMBOO_CHEST_RAFT = register(new ItemType("bamboo_chest_raft", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType BAMBOO_DOOR = register(new ItemType("bamboo_door", Component.getBuilder().build()));
    public static ItemType BAMBOO_FENCE = register(new ItemType("bamboo_fence", Component.getBuilder().build()));
    public static ItemType BAMBOO_FENCE_GATE = register(new ItemType("bamboo_fence_gate", Component.getBuilder().build()));
    public static ItemType BAMBOO_HANGING_SIGN = register(new ItemType("bamboo_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType BAMBOO_MOSAIC = register(new ItemType("bamboo_mosaic", Component.getBuilder().build()));
    public static ItemType BAMBOO_MOSAIC_SLAB = register(new ItemType("bamboo_mosaic_slab", Component.getBuilder().build()));
    public static ItemType BAMBOO_MOSAIC_STAIRS = register(new ItemType("bamboo_mosaic_stairs", Component.getBuilder().build()));
    public static ItemType BAMBOO_PLANKS = register(new ItemType("bamboo_planks", Component.getBuilder().build()));
    public static ItemType BAMBOO_PRESSURE_PLATE = register(new ItemType("bamboo_pressure_plate", Component.getBuilder().build()));
    public static ItemType BAMBOO_RAFT = register(new ItemType("bamboo_raft", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType BAMBOO_SIGN = register(new ItemType("bamboo_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType BAMBOO_SLAB = register(new ItemType("bamboo_slab", Component.getBuilder().build()));
    public static ItemType BAMBOO_STAIRS = register(new ItemType("bamboo_stairs", Component.getBuilder().build()));
    public static ItemType BAMBOO_TRAPDOOR = register(new ItemType("bamboo_trapdoor", Component.getBuilder().build()));
    public static ItemType BARREL = register(new ItemType("barrel", Component.getBuilder().build()));
    public static ItemType BARRIER = register(new ItemType("barrier", Component.getBuilder().setRarity(Rarity.EPIC).build()));
    public static ItemType BASALT = register(new ItemType("basalt", Component.getBuilder().build()));
    public static ItemType BAT_SPAWN_EGG = register(new ItemType("bat_spawn_egg", Component.getBuilder().build()));
    public static ItemType BEACON = register(new ItemType("beacon", Component.getBuilder().setRarity(Rarity.RARE).build()));
    public static ItemType BEDROCK = register(new ItemType("bedrock", Component.getBuilder().build()));
    public static ItemType BEE_NEST = register(new ItemType("bee_nest", Component.getBuilder().build()));
    public static ItemType BEE_SPAWN_EGG = register(new ItemType("bee_spawn_egg", Component.getBuilder().build()));
    public static ItemType BEEF = register(new ItemType("beef", Component.getBuilder().build()));
    public static ItemType BEEHIVE = register(new ItemType("beehive", Component.getBuilder().build()));
    public static ItemType BEETROOT = register(new ItemType("beetroot", Component.getBuilder().build()));
    public static ItemType BEETROOT_SEEDS = register(new ItemType("beetroot_seeds", Component.getBuilder().build()));
    public static ItemType BEETROOT_SOUP = register(new ItemType("beetroot_soup", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType BELL = register(new ItemType("bell", Component.getBuilder().build()));
    public static ItemType BIG_DRIPLEAF = register(new ItemType("big_dripleaf", Component.getBuilder().build()));
    public static ItemType BIRCH_BOAT = register(new ItemType("birch_boat", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType BIRCH_BUTTON = register(new ItemType("birch_button", Component.getBuilder().build()));
    public static ItemType BIRCH_CHEST_BOAT = register(new ItemType("birch_chest_boat", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType BIRCH_DOOR = register(new ItemType("birch_door", Component.getBuilder().build()));
    public static ItemType BIRCH_FENCE = register(new ItemType("birch_fence", Component.getBuilder().build()));
    public static ItemType BIRCH_FENCE_GATE = register(new ItemType("birch_fence_gate", Component.getBuilder().build()));
    public static ItemType BIRCH_HANGING_SIGN = register(new ItemType("birch_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType BIRCH_LEAVES = register(new ItemType("birch_leaves", Component.getBuilder().build()));
    public static ItemType BIRCH_LOG = register(new ItemType("birch_log", Component.getBuilder().build()));
    public static ItemType BIRCH_PLANKS = register(new ItemType("birch_planks", Component.getBuilder().build()));
    public static ItemType BIRCH_PRESSURE_PLATE = register(new ItemType("birch_pressure_plate", Component.getBuilder().build()));
    public static ItemType BIRCH_SAPLING = register(new ItemType("birch_sapling", Component.getBuilder().build()));
    public static ItemType BIRCH_SIGN = register(new ItemType("birch_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType BIRCH_SLAB = register(new ItemType("birch_slab", Component.getBuilder().build()));
    public static ItemType BIRCH_STAIRS = register(new ItemType("birch_stairs", Component.getBuilder().build()));
    public static ItemType BIRCH_TRAPDOOR = register(new ItemType("birch_trapdoor", Component.getBuilder().build()));
    public static ItemType BIRCH_WOOD = register(new ItemType("birch_wood", Component.getBuilder().build()));
    public static ItemType BLACK_BANNER = register(new ItemType("black_banner", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType BLACK_BED = register(new ItemType("black_bed", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType BLACK_CANDLE = register(new ItemType("black_candle", Component.getBuilder().build()));
    public static ItemType BLACK_CARPET = register(new ItemType("black_carpet", Component.getBuilder().build()));
    public static ItemType BLACK_CONCRETE = register(new ItemType("black_concrete", Component.getBuilder().build()));
    public static ItemType BLACK_CONCRETE_POWDER = register(new ItemType("black_concrete_powder", Component.getBuilder().build()));
    public static ItemType BLACK_DYE = register(new ItemType("black_dye", Component.getBuilder().build()));
    public static ItemType BLACK_GLAZED_TERRACOTTA = register(new ItemType("black_glazed_terracotta", Component.getBuilder().build()));
    public static ItemType BLACK_SHULKER_BOX = register(new ItemType("black_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType BLACK_STAINED_GLASS = register(new ItemType("black_stained_glass", Component.getBuilder().build()));
    public static ItemType BLACK_STAINED_GLASS_PANE = register(new ItemType("black_stained_glass_pane", Component.getBuilder().build()));
    public static ItemType BLACK_TERRACOTTA = register(new ItemType("black_terracotta", Component.getBuilder().build()));
    public static ItemType BLACK_WOOL = register(new ItemType("black_wool", Component.getBuilder().build()));
    public static ItemType BLACKSTONE = register(new ItemType("blackstone", Component.getBuilder().build()));
    public static ItemType BLACKSTONE_SLAB = register(new ItemType("blackstone_slab", Component.getBuilder().build()));
    public static ItemType BLACKSTONE_STAIRS = register(new ItemType("blackstone_stairs", Component.getBuilder().build()));
    public static ItemType BLACKSTONE_WALL = register(new ItemType("blackstone_wall", Component.getBuilder().build()));
    public static ItemType BLADE_POTTERY_SHERD = register(new ItemType("blade_pottery_sherd", Component.getBuilder().build()));
    public static ItemType BLAST_FURNACE = register(new ItemType("blast_furnace", Component.getBuilder().build()));
    public static ItemType BLAZE_POWDER = register(new ItemType("blaze_powder", Component.getBuilder().build()));
    public static ItemType BLAZE_ROD = register(new ItemType("blaze_rod", Component.getBuilder().build()));
    public static ItemType BLAZE_SPAWN_EGG = register(new ItemType("blaze_spawn_egg", Component.getBuilder().build()));
    public static ItemType BLUE_BANNER = register(new ItemType("blue_banner", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType BLUE_BED = register(new ItemType("blue_bed", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType BLUE_CANDLE = register(new ItemType("blue_candle", Component.getBuilder().build()));
    public static ItemType BLUE_CARPET = register(new ItemType("blue_carpet", Component.getBuilder().build()));
    public static ItemType BLUE_CONCRETE = register(new ItemType("blue_concrete", Component.getBuilder().build()));
    public static ItemType BLUE_CONCRETE_POWDER = register(new ItemType("blue_concrete_powder", Component.getBuilder().build()));
    public static ItemType BLUE_DYE = register(new ItemType("blue_dye", Component.getBuilder().build()));
    public static ItemType BLUE_GLAZED_TERRACOTTA = register(new ItemType("blue_glazed_terracotta", Component.getBuilder().build()));
    public static ItemType BLUE_ICE = register(new ItemType("blue_ice", Component.getBuilder().build()));
    public static ItemType BLUE_ORCHID = register(new ItemType("blue_orchid", Component.getBuilder().build()));
    public static ItemType BLUE_SHULKER_BOX = register(new ItemType("blue_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType BLUE_STAINED_GLASS = register(new ItemType("blue_stained_glass", Component.getBuilder().build()));
    public static ItemType BLUE_STAINED_GLASS_PANE = register(new ItemType("blue_stained_glass_pane", Component.getBuilder().build()));
    public static ItemType BLUE_TERRACOTTA = register(new ItemType("blue_terracotta", Component.getBuilder().build()));
    public static ItemType BLUE_WOOL = register(new ItemType("blue_wool", Component.getBuilder().build()));
    public static ItemType BOGGED_SPAWN_EGG = register(new ItemType("bogged_spawn_egg", Component.getBuilder().build()));
    public static ItemType BOLT_ARMOR_TRIM_SMITHING_TEMPLATE = register(new ItemType("bolt_armor_trim_smithing_template", Component.getBuilder().build()));
    public static ItemType BONE = register(new ItemType("bone", Component.getBuilder().build()));
    public static ItemType BONE_BLOCK = register(new ItemType("bone_block", Component.getBuilder().build()));
    public static ItemType BONE_MEAL = register(new ItemType("bone_meal", Component.getBuilder().build()));
    public static ItemType BOOK = register(new ItemType("book", Component.getBuilder().build()));
    public static ItemType BOOKSHELF = register(new ItemType("bookshelf", Component.getBuilder().build()));
    public static ItemType BOW = register(new ItemType("bow", Component.getBuilder().setMaxDamage(384).setMaxStackSize(1).build()));
    public static ItemType BOWL = register(new ItemType("bowl", Component.getBuilder().build()));
    public static ItemType BRAIN_CORAL = register(new ItemType("brain_coral", Component.getBuilder().build()));
    public static ItemType BRAIN_CORAL_BLOCK = register(new ItemType("brain_coral_block", Component.getBuilder().build()));
    public static ItemType BRAIN_CORAL_FAN = register(new ItemType("brain_coral_fan", Component.getBuilder().build()));
    public static ItemType BREAD = register(new ItemType("bread", Component.getBuilder().build()));
    public static ItemType BREEZE_ROD = register(new ItemType("breeze_rod", Component.getBuilder().build()));
    public static ItemType BREEZE_SPAWN_EGG = register(new ItemType("breeze_spawn_egg", Component.getBuilder().build()));
    public static ItemType BREWER_POTTERY_SHERD = register(new ItemType("brewer_pottery_sherd", Component.getBuilder().build()));
    public static ItemType BREWING_STAND = register(new ItemType("brewing_stand", Component.getBuilder().build()));
    public static ItemType BRICK = register(new ItemType("brick", Component.getBuilder().build()));
    public static ItemType BRICK_SLAB = register(new ItemType("brick_slab", Component.getBuilder().build()));
    public static ItemType BRICK_STAIRS = register(new ItemType("brick_stairs", Component.getBuilder().build()));
    public static ItemType BRICK_WALL = register(new ItemType("brick_wall", Component.getBuilder().build()));
    public static ItemType BRICKS = register(new ItemType("bricks", Component.getBuilder().build()));
    public static ItemType BROWN_BANNER = register(new ItemType("brown_banner", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType BROWN_BED = register(new ItemType("brown_bed", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType BROWN_CANDLE = register(new ItemType("brown_candle", Component.getBuilder().build()));
    public static ItemType BROWN_CARPET = register(new ItemType("brown_carpet", Component.getBuilder().build()));
    public static ItemType BROWN_CONCRETE = register(new ItemType("brown_concrete", Component.getBuilder().build()));
    public static ItemType BROWN_CONCRETE_POWDER = register(new ItemType("brown_concrete_powder", Component.getBuilder().build()));
    public static ItemType BROWN_DYE = register(new ItemType("brown_dye", Component.getBuilder().build()));
    public static ItemType BROWN_GLAZED_TERRACOTTA = register(new ItemType("brown_glazed_terracotta", Component.getBuilder().build()));
    public static ItemType BROWN_MUSHROOM = register(new ItemType("brown_mushroom", Component.getBuilder().build()));
    public static ItemType BROWN_MUSHROOM_BLOCK = register(new ItemType("brown_mushroom_block", Component.getBuilder().build()));
    public static ItemType BROWN_SHULKER_BOX = register(new ItemType("brown_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType BROWN_STAINED_GLASS = register(new ItemType("brown_stained_glass", Component.getBuilder().build()));
    public static ItemType BROWN_STAINED_GLASS_PANE = register(new ItemType("brown_stained_glass_pane", Component.getBuilder().build()));
    public static ItemType BROWN_TERRACOTTA = register(new ItemType("brown_terracotta", Component.getBuilder().build()));
    public static ItemType BROWN_WOOL = register(new ItemType("brown_wool", Component.getBuilder().build()));
    public static ItemType BRUSH = register(new ItemType("brush", Component.getBuilder().setMaxDamage(64).setMaxStackSize(1).build()));
    public static ItemType BUBBLE_CORAL = register(new ItemType("bubble_coral", Component.getBuilder().build()));
    public static ItemType BUBBLE_CORAL_BLOCK = register(new ItemType("bubble_coral_block", Component.getBuilder().build()));
    public static ItemType BUBBLE_CORAL_FAN = register(new ItemType("bubble_coral_fan", Component.getBuilder().build()));
    public static ItemType BUCKET = register(new ItemType("bucket", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType BUDDING_AMETHYST = register(new ItemType("budding_amethyst", Component.getBuilder().build()));
    public static ItemType BUNDLE = register(new ItemType("bundle", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType BURN_POTTERY_SHERD = register(new ItemType("burn_pottery_sherd", Component.getBuilder().build()));
    public static ItemType CACTUS = register(new ItemType("cactus", Component.getBuilder().build()));
    public static ItemType CAKE = register(new ItemType("cake", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType CALCITE = register(new ItemType("calcite", Component.getBuilder().build()));
    public static ItemType CALIBRATED_SCULK_SENSOR = register(new ItemType("calibrated_sculk_sensor", Component.getBuilder().build()));
    public static ItemType CAMEL_SPAWN_EGG = register(new ItemType("camel_spawn_egg", Component.getBuilder().build()));
    public static ItemType CAMPFIRE = register(new ItemType("campfire", Component.getBuilder().build()));
    public static ItemType CANDLE = register(new ItemType("candle", Component.getBuilder().build()));
    public static ItemType CARROT = register(new ItemType("carrot", Component.getBuilder().build()));
    public static ItemType CARROT_ON_A_STICK = register(new ItemType("carrot_on_a_stick", Component.getBuilder().setMaxDamage(25).setMaxStackSize(1).build()));
    public static ItemType CARTOGRAPHY_TABLE = register(new ItemType("cartography_table", Component.getBuilder().build()));
    public static ItemType CARVED_PUMPKIN = register(new ItemType("carved_pumpkin", Component.getBuilder().build()));
    public static ItemType CAT_SPAWN_EGG = register(new ItemType("cat_spawn_egg", Component.getBuilder().build()));
    public static ItemType CAULDRON = register(new ItemType("cauldron", Component.getBuilder().build()));
    public static ItemType CAVE_SPIDER_SPAWN_EGG = register(new ItemType("cave_spider_spawn_egg", Component.getBuilder().build()));
    public static ItemType CHAIN = register(new ItemType("chain", Component.getBuilder().build()));
    public static ItemType CHAIN_COMMAND_BLOCK = register(new ItemType("chain_command_block", Component.getBuilder().setRarity(Rarity.EPIC).build()));
    public static ItemType CHAINMAIL_BOOTS = register(new ItemType("chainmail_boots", Component.getBuilder().setMaxDamage(195).setMaxStackSize(1).build()));
    public static ItemType CHAINMAIL_CHESTPLATE = register(new ItemType("chainmail_chestplate", Component.getBuilder().setMaxDamage(240).setMaxStackSize(1).build()));
    public static ItemType CHAINMAIL_HELMET = register(new ItemType("chainmail_helmet", Component.getBuilder().setMaxDamage(165).setMaxStackSize(1).build()));
    public static ItemType CHAINMAIL_LEGGINGS = register(new ItemType("chainmail_leggings", Component.getBuilder().setMaxDamage(225).setMaxStackSize(1).build()));
    public static ItemType CHARCOAL = register(new ItemType("charcoal", Component.getBuilder().build()));
    public static ItemType CHERRY_BOAT = register(new ItemType("cherry_boat", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType CHERRY_BUTTON = register(new ItemType("cherry_button", Component.getBuilder().build()));
    public static ItemType CHERRY_CHEST_BOAT = register(new ItemType("cherry_chest_boat", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType CHERRY_DOOR = register(new ItemType("cherry_door", Component.getBuilder().build()));
    public static ItemType CHERRY_FENCE = register(new ItemType("cherry_fence", Component.getBuilder().build()));
    public static ItemType CHERRY_FENCE_GATE = register(new ItemType("cherry_fence_gate", Component.getBuilder().build()));
    public static ItemType CHERRY_HANGING_SIGN = register(new ItemType("cherry_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType CHERRY_LEAVES = register(new ItemType("cherry_leaves", Component.getBuilder().build()));
    public static ItemType CHERRY_LOG = register(new ItemType("cherry_log", Component.getBuilder().build()));
    public static ItemType CHERRY_PLANKS = register(new ItemType("cherry_planks", Component.getBuilder().build()));
    public static ItemType CHERRY_PRESSURE_PLATE = register(new ItemType("cherry_pressure_plate", Component.getBuilder().build()));
    public static ItemType CHERRY_SAPLING = register(new ItemType("cherry_sapling", Component.getBuilder().build()));
    public static ItemType CHERRY_SIGN = register(new ItemType("cherry_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType CHERRY_SLAB = register(new ItemType("cherry_slab", Component.getBuilder().build()));
    public static ItemType CHERRY_STAIRS = register(new ItemType("cherry_stairs", Component.getBuilder().build()));
    public static ItemType CHERRY_TRAPDOOR = register(new ItemType("cherry_trapdoor", Component.getBuilder().build()));
    public static ItemType CHERRY_WOOD = register(new ItemType("cherry_wood", Component.getBuilder().build()));
    public static ItemType CHEST = register(new ItemType("chest", Component.getBuilder().build()));
    public static ItemType CHEST_MINECART = register(new ItemType("chest_minecart", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType CHICKEN = register(new ItemType("chicken", Component.getBuilder().build()));
    public static ItemType CHICKEN_SPAWN_EGG = register(new ItemType("chicken_spawn_egg", Component.getBuilder().build()));
    public static ItemType CHIPPED_ANVIL = register(new ItemType("chipped_anvil", Component.getBuilder().build()));
    public static ItemType CHISELED_BOOKSHELF = register(new ItemType("chiseled_bookshelf", Component.getBuilder().build()));
    public static ItemType CHISELED_COPPER = register(new ItemType("chiseled_copper", Component.getBuilder().build()));
    public static ItemType CHISELED_DEEPSLATE = register(new ItemType("chiseled_deepslate", Component.getBuilder().build()));
    public static ItemType CHISELED_NETHER_BRICKS = register(new ItemType("chiseled_nether_bricks", Component.getBuilder().build()));
    public static ItemType CHISELED_POLISHED_BLACKSTONE = register(new ItemType("chiseled_polished_blackstone", Component.getBuilder().build()));
    public static ItemType CHISELED_QUARTZ_BLOCK = register(new ItemType("chiseled_quartz_block", Component.getBuilder().build()));
    public static ItemType CHISELED_RED_SANDSTONE = register(new ItemType("chiseled_red_sandstone", Component.getBuilder().build()));
    public static ItemType CHISELED_SANDSTONE = register(new ItemType("chiseled_sandstone", Component.getBuilder().build()));
    public static ItemType CHISELED_STONE_BRICKS = register(new ItemType("chiseled_stone_bricks", Component.getBuilder().build()));
    public static ItemType CHISELED_TUFF = register(new ItemType("chiseled_tuff", Component.getBuilder().build()));
    public static ItemType CHISELED_TUFF_BRICKS = register(new ItemType("chiseled_tuff_bricks", Component.getBuilder().build()));
    public static ItemType CHORUS_FLOWER = register(new ItemType("chorus_flower", Component.getBuilder().build()));
    public static ItemType CHORUS_FRUIT = register(new ItemType("chorus_fruit", Component.getBuilder().build()));
    public static ItemType CHORUS_PLANT = register(new ItemType("chorus_plant", Component.getBuilder().build()));
    public static ItemType CLAY = register(new ItemType("clay", Component.getBuilder().build()));
    public static ItemType CLAY_BALL = register(new ItemType("clay_ball", Component.getBuilder().build()));
    public static ItemType CLOCK = register(new ItemType("clock", Component.getBuilder().build()));
    public static ItemType COAL = register(new ItemType("coal", Component.getBuilder().build()));
    public static ItemType COAL_BLOCK = register(new ItemType("coal_block", Component.getBuilder().build()));
    public static ItemType COAL_ORE = register(new ItemType("coal_ore", Component.getBuilder().build()));
    public static ItemType COARSE_DIRT = register(new ItemType("coarse_dirt", Component.getBuilder().build()));
    public static ItemType COAST_ARMOR_TRIM_SMITHING_TEMPLATE = register(new ItemType("coast_armor_trim_smithing_template", Component.getBuilder().build()));
    public static ItemType COBBLED_DEEPSLATE = register(new ItemType("cobbled_deepslate", Component.getBuilder().build()));
    public static ItemType COBBLED_DEEPSLATE_SLAB = register(new ItemType("cobbled_deepslate_slab", Component.getBuilder().build()));
    public static ItemType COBBLED_DEEPSLATE_STAIRS = register(new ItemType("cobbled_deepslate_stairs", Component.getBuilder().build()));
    public static ItemType COBBLED_DEEPSLATE_WALL = register(new ItemType("cobbled_deepslate_wall", Component.getBuilder().build()));
    public static ItemType COBBLESTONE = register(new ItemType("cobblestone", Component.getBuilder().build()));
    public static ItemType COBBLESTONE_SLAB = register(new ItemType("cobblestone_slab", Component.getBuilder().build()));
    public static ItemType COBBLESTONE_STAIRS = register(new ItemType("cobblestone_stairs", Component.getBuilder().build()));
    public static ItemType COBBLESTONE_WALL = register(new ItemType("cobblestone_wall", Component.getBuilder().build()));
    public static ItemType COBWEB = register(new ItemType("cobweb", Component.getBuilder().build()));
    public static ItemType COCOA_BEANS = register(new ItemType("cocoa_beans", Component.getBuilder().build()));
    public static ItemType COD = register(new ItemType("cod", Component.getBuilder().build()));
    public static ItemType COD_BUCKET = register(new ItemType("cod_bucket", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType COD_SPAWN_EGG = register(new ItemType("cod_spawn_egg", Component.getBuilder().build()));
    public static ItemType COMMAND_BLOCK = register(new ItemType("command_block", Component.getBuilder().setRarity(Rarity.EPIC).build()));
    public static ItemType COMMAND_BLOCK_MINECART = register(new ItemType("command_block_minecart", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.EPIC).build()));
    public static ItemType COMPARATOR = register(new ItemType("comparator", Component.getBuilder().build()));
    public static ItemType COMPASS = register(new ItemType("compass", Component.getBuilder().build()));
    public static ItemType COMPOSTER = register(new ItemType("composter", Component.getBuilder().build()));
    public static ItemType CONDUIT = register(new ItemType("conduit", Component.getBuilder().setRarity(Rarity.RARE).build()));
    public static ItemType COOKED_BEEF = register(new ItemType("cooked_beef", Component.getBuilder().build()));
    public static ItemType COOKED_CHICKEN = register(new ItemType("cooked_chicken", Component.getBuilder().build()));
    public static ItemType COOKED_COD = register(new ItemType("cooked_cod", Component.getBuilder().build()));
    public static ItemType COOKED_MUTTON = register(new ItemType("cooked_mutton", Component.getBuilder().build()));
    public static ItemType COOKED_PORKCHOP = register(new ItemType("cooked_porkchop", Component.getBuilder().build()));
    public static ItemType COOKED_RABBIT = register(new ItemType("cooked_rabbit", Component.getBuilder().build()));
    public static ItemType COOKED_SALMON = register(new ItemType("cooked_salmon", Component.getBuilder().build()));
    public static ItemType COOKIE = register(new ItemType("cookie", Component.getBuilder().build()));
    public static ItemType COPPER_BLOCK = register(new ItemType("copper_block", Component.getBuilder().build()));
    public static ItemType COPPER_BULB = register(new ItemType("copper_bulb", Component.getBuilder().build()));
    public static ItemType COPPER_DOOR = register(new ItemType("copper_door", Component.getBuilder().build()));
    public static ItemType COPPER_GRATE = register(new ItemType("copper_grate", Component.getBuilder().build()));
    public static ItemType COPPER_INGOT = register(new ItemType("copper_ingot", Component.getBuilder().build()));
    public static ItemType COPPER_ORE = register(new ItemType("copper_ore", Component.getBuilder().build()));
    public static ItemType COPPER_TRAPDOOR = register(new ItemType("copper_trapdoor", Component.getBuilder().build()));
    public static ItemType CORNFLOWER = register(new ItemType("cornflower", Component.getBuilder().build()));
    public static ItemType COW_SPAWN_EGG = register(new ItemType("cow_spawn_egg", Component.getBuilder().build()));
    public static ItemType CRACKED_DEEPSLATE_BRICKS = register(new ItemType("cracked_deepslate_bricks", Component.getBuilder().build()));
    public static ItemType CRACKED_DEEPSLATE_TILES = register(new ItemType("cracked_deepslate_tiles", Component.getBuilder().build()));
    public static ItemType CRACKED_NETHER_BRICKS = register(new ItemType("cracked_nether_bricks", Component.getBuilder().build()));
    public static ItemType CRACKED_POLISHED_BLACKSTONE_BRICKS = register(new ItemType("cracked_polished_blackstone_bricks", Component.getBuilder().build()));
    public static ItemType CRACKED_STONE_BRICKS = register(new ItemType("cracked_stone_bricks", Component.getBuilder().build()));
    public static ItemType CRAFTER = register(new ItemType("crafter", Component.getBuilder().build()));
    public static ItemType CRAFTING_TABLE = register(new ItemType("crafting_table", Component.getBuilder().build()));
    public static ItemType CREEPER_BANNER_PATTERN = register(new ItemType("creeper_banner_pattern", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.UNCOMMON).build()));
    public static ItemType CREEPER_HEAD = register(new ItemType("creeper_head", Component.getBuilder().setRarity(Rarity.UNCOMMON).build()));
    public static ItemType CREEPER_SPAWN_EGG = register(new ItemType("creeper_spawn_egg", Component.getBuilder().build()));
    public static ItemType CRIMSON_BUTTON = register(new ItemType("crimson_button", Component.getBuilder().build()));
    public static ItemType CRIMSON_DOOR = register(new ItemType("crimson_door", Component.getBuilder().build()));
    public static ItemType CRIMSON_FENCE = register(new ItemType("crimson_fence", Component.getBuilder().build()));
    public static ItemType CRIMSON_FENCE_GATE = register(new ItemType("crimson_fence_gate", Component.getBuilder().build()));
    public static ItemType CRIMSON_FUNGUS = register(new ItemType("crimson_fungus", Component.getBuilder().build()));
    public static ItemType CRIMSON_HANGING_SIGN = register(new ItemType("crimson_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType CRIMSON_HYPHAE = register(new ItemType("crimson_hyphae", Component.getBuilder().build()));
    public static ItemType CRIMSON_NYLIUM = register(new ItemType("crimson_nylium", Component.getBuilder().build()));
    public static ItemType CRIMSON_PLANKS = register(new ItemType("crimson_planks", Component.getBuilder().build()));
    public static ItemType CRIMSON_PRESSURE_PLATE = register(new ItemType("crimson_pressure_plate", Component.getBuilder().build()));
    public static ItemType CRIMSON_ROOTS = register(new ItemType("crimson_roots", Component.getBuilder().build()));
    public static ItemType CRIMSON_SIGN = register(new ItemType("crimson_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType CRIMSON_SLAB = register(new ItemType("crimson_slab", Component.getBuilder().build()));
    public static ItemType CRIMSON_STAIRS = register(new ItemType("crimson_stairs", Component.getBuilder().build()));
    public static ItemType CRIMSON_STEM = register(new ItemType("crimson_stem", Component.getBuilder().build()));
    public static ItemType CRIMSON_TRAPDOOR = register(new ItemType("crimson_trapdoor", Component.getBuilder().build()));
    public static ItemType CROSSBOW = register(new ItemType("crossbow", Component.getBuilder().setMaxDamage(465).setMaxStackSize(1).build()));
    public static ItemType CRYING_OBSIDIAN = register(new ItemType("crying_obsidian", Component.getBuilder().build()));
    public static ItemType CUT_COPPER = register(new ItemType("cut_copper", Component.getBuilder().build()));
    public static ItemType CUT_COPPER_SLAB = register(new ItemType("cut_copper_slab", Component.getBuilder().build()));
    public static ItemType CUT_COPPER_STAIRS = register(new ItemType("cut_copper_stairs", Component.getBuilder().build()));
    public static ItemType CUT_RED_SANDSTONE = register(new ItemType("cut_red_sandstone", Component.getBuilder().build()));
    public static ItemType CUT_RED_SANDSTONE_SLAB = register(new ItemType("cut_red_sandstone_slab", Component.getBuilder().build()));
    public static ItemType CUT_SANDSTONE = register(new ItemType("cut_sandstone", Component.getBuilder().build()));
    public static ItemType CUT_SANDSTONE_SLAB = register(new ItemType("cut_sandstone_slab", Component.getBuilder().build()));
    public static ItemType CYAN_BANNER = register(new ItemType("cyan_banner", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType CYAN_BED = register(new ItemType("cyan_bed", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType CYAN_CANDLE = register(new ItemType("cyan_candle", Component.getBuilder().build()));
    public static ItemType CYAN_CARPET = register(new ItemType("cyan_carpet", Component.getBuilder().build()));
    public static ItemType CYAN_CONCRETE = register(new ItemType("cyan_concrete", Component.getBuilder().build()));
    public static ItemType CYAN_CONCRETE_POWDER = register(new ItemType("cyan_concrete_powder", Component.getBuilder().build()));
    public static ItemType CYAN_DYE = register(new ItemType("cyan_dye", Component.getBuilder().build()));
    public static ItemType CYAN_GLAZED_TERRACOTTA = register(new ItemType("cyan_glazed_terracotta", Component.getBuilder().build()));
    public static ItemType CYAN_SHULKER_BOX = register(new ItemType("cyan_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType CYAN_STAINED_GLASS = register(new ItemType("cyan_stained_glass", Component.getBuilder().build()));
    public static ItemType CYAN_STAINED_GLASS_PANE = register(new ItemType("cyan_stained_glass_pane", Component.getBuilder().build()));
    public static ItemType CYAN_TERRACOTTA = register(new ItemType("cyan_terracotta", Component.getBuilder().build()));
    public static ItemType CYAN_WOOL = register(new ItemType("cyan_wool", Component.getBuilder().build()));
    public static ItemType DAMAGED_ANVIL = register(new ItemType("damaged_anvil", Component.getBuilder().build()));
    public static ItemType DANDELION = register(new ItemType("dandelion", Component.getBuilder().build()));
    public static ItemType DANGER_POTTERY_SHERD = register(new ItemType("danger_pottery_sherd", Component.getBuilder().build()));
    public static ItemType DARK_OAK_BOAT = register(new ItemType("dark_oak_boat", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType DARK_OAK_BUTTON = register(new ItemType("dark_oak_button", Component.getBuilder().build()));
    public static ItemType DARK_OAK_CHEST_BOAT = register(new ItemType("dark_oak_chest_boat", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType DARK_OAK_DOOR = register(new ItemType("dark_oak_door", Component.getBuilder().build()));
    public static ItemType DARK_OAK_FENCE = register(new ItemType("dark_oak_fence", Component.getBuilder().build()));
    public static ItemType DARK_OAK_FENCE_GATE = register(new ItemType("dark_oak_fence_gate", Component.getBuilder().build()));
    public static ItemType DARK_OAK_HANGING_SIGN = register(new ItemType("dark_oak_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType DARK_OAK_LEAVES = register(new ItemType("dark_oak_leaves", Component.getBuilder().build()));
    public static ItemType DARK_OAK_LOG = register(new ItemType("dark_oak_log", Component.getBuilder().build()));
    public static ItemType DARK_OAK_PLANKS = register(new ItemType("dark_oak_planks", Component.getBuilder().build()));
    public static ItemType DARK_OAK_PRESSURE_PLATE = register(new ItemType("dark_oak_pressure_plate", Component.getBuilder().build()));
    public static ItemType DARK_OAK_SAPLING = register(new ItemType("dark_oak_sapling", Component.getBuilder().build()));
    public static ItemType DARK_OAK_SIGN = register(new ItemType("dark_oak_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType DARK_OAK_SLAB = register(new ItemType("dark_oak_slab", Component.getBuilder().build()));
    public static ItemType DARK_OAK_STAIRS = register(new ItemType("dark_oak_stairs", Component.getBuilder().build()));
    public static ItemType DARK_OAK_TRAPDOOR = register(new ItemType("dark_oak_trapdoor", Component.getBuilder().build()));
    public static ItemType DARK_OAK_WOOD = register(new ItemType("dark_oak_wood", Component.getBuilder().build()));
    public static ItemType DARK_PRISMARINE = register(new ItemType("dark_prismarine", Component.getBuilder().build()));
    public static ItemType DARK_PRISMARINE_SLAB = register(new ItemType("dark_prismarine_slab", Component.getBuilder().build()));
    public static ItemType DARK_PRISMARINE_STAIRS = register(new ItemType("dark_prismarine_stairs", Component.getBuilder().build()));
    public static ItemType DAYLIGHT_DETECTOR = register(new ItemType("daylight_detector", Component.getBuilder().build()));
    public static ItemType DEAD_BRAIN_CORAL = register(new ItemType("dead_brain_coral", Component.getBuilder().build()));
    public static ItemType DEAD_BRAIN_CORAL_BLOCK = register(new ItemType("dead_brain_coral_block", Component.getBuilder().build()));
    public static ItemType DEAD_BRAIN_CORAL_FAN = register(new ItemType("dead_brain_coral_fan", Component.getBuilder().build()));
    public static ItemType DEAD_BUBBLE_CORAL = register(new ItemType("dead_bubble_coral", Component.getBuilder().build()));
    public static ItemType DEAD_BUBBLE_CORAL_BLOCK = register(new ItemType("dead_bubble_coral_block", Component.getBuilder().build()));
    public static ItemType DEAD_BUBBLE_CORAL_FAN = register(new ItemType("dead_bubble_coral_fan", Component.getBuilder().build()));
    public static ItemType DEAD_BUSH = register(new ItemType("dead_bush", Component.getBuilder().build()));
    public static ItemType DEAD_FIRE_CORAL = register(new ItemType("dead_fire_coral", Component.getBuilder().build()));
    public static ItemType DEAD_FIRE_CORAL_BLOCK = register(new ItemType("dead_fire_coral_block", Component.getBuilder().build()));
    public static ItemType DEAD_FIRE_CORAL_FAN = register(new ItemType("dead_fire_coral_fan", Component.getBuilder().build()));
    public static ItemType DEAD_HORN_CORAL = register(new ItemType("dead_horn_coral", Component.getBuilder().build()));
    public static ItemType DEAD_HORN_CORAL_BLOCK = register(new ItemType("dead_horn_coral_block", Component.getBuilder().build()));
    public static ItemType DEAD_HORN_CORAL_FAN = register(new ItemType("dead_horn_coral_fan", Component.getBuilder().build()));
    public static ItemType DEAD_TUBE_CORAL = register(new ItemType("dead_tube_coral", Component.getBuilder().build()));
    public static ItemType DEAD_TUBE_CORAL_BLOCK = register(new ItemType("dead_tube_coral_block", Component.getBuilder().build()));
    public static ItemType DEAD_TUBE_CORAL_FAN = register(new ItemType("dead_tube_coral_fan", Component.getBuilder().build()));
    public static ItemType DEBUG_STICK = register(new ItemType("debug_stick", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.EPIC).setEnchantmentGlintOverride(true).build()));
    public static ItemType DECORATED_POT = register(new ItemType("decorated_pot", Component.getBuilder().build()));
    public static ItemType DEEPSLATE = register(new ItemType("deepslate", Component.getBuilder().build()));
    public static ItemType DEEPSLATE_BRICK_SLAB = register(new ItemType("deepslate_brick_slab", Component.getBuilder().build()));
    public static ItemType DEEPSLATE_BRICK_STAIRS = register(new ItemType("deepslate_brick_stairs", Component.getBuilder().build()));
    public static ItemType DEEPSLATE_BRICK_WALL = register(new ItemType("deepslate_brick_wall", Component.getBuilder().build()));
    public static ItemType DEEPSLATE_BRICKS = register(new ItemType("deepslate_bricks", Component.getBuilder().build()));
    public static ItemType DEEPSLATE_COAL_ORE = register(new ItemType("deepslate_coal_ore", Component.getBuilder().build()));
    public static ItemType DEEPSLATE_COPPER_ORE = register(new ItemType("deepslate_copper_ore", Component.getBuilder().build()));
    public static ItemType DEEPSLATE_DIAMOND_ORE = register(new ItemType("deepslate_diamond_ore", Component.getBuilder().build()));
    public static ItemType DEEPSLATE_EMERALD_ORE = register(new ItemType("deepslate_emerald_ore", Component.getBuilder().build()));
    public static ItemType DEEPSLATE_GOLD_ORE = register(new ItemType("deepslate_gold_ore", Component.getBuilder().build()));
    public static ItemType DEEPSLATE_IRON_ORE = register(new ItemType("deepslate_iron_ore", Component.getBuilder().build()));
    public static ItemType DEEPSLATE_LAPIS_ORE = register(new ItemType("deepslate_lapis_ore", Component.getBuilder().build()));
    public static ItemType DEEPSLATE_REDSTONE_ORE = register(new ItemType("deepslate_redstone_ore", Component.getBuilder().build()));
    public static ItemType DEEPSLATE_TILE_SLAB = register(new ItemType("deepslate_tile_slab", Component.getBuilder().build()));
    public static ItemType DEEPSLATE_TILE_STAIRS = register(new ItemType("deepslate_tile_stairs", Component.getBuilder().build()));
    public static ItemType DEEPSLATE_TILE_WALL = register(new ItemType("deepslate_tile_wall", Component.getBuilder().build()));
    public static ItemType DEEPSLATE_TILES = register(new ItemType("deepslate_tiles", Component.getBuilder().build()));
    public static ItemType DETECTOR_RAIL = register(new ItemType("detector_rail", Component.getBuilder().build()));
    public static ItemType DIAMOND = register(new ItemType("diamond", Component.getBuilder().build()));
    public static ItemType DIAMOND_AXE = register(new ItemType("diamond_axe", Component.getBuilder().setMaxDamage(1561).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_diamond_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/axe"), true, 8.0d)).setDamagePerBlock(2)).build()));
    public static ItemType DIAMOND_BLOCK = register(new ItemType("diamond_block", Component.getBuilder().build()));
    public static ItemType DIAMOND_BOOTS = register(new ItemType("diamond_boots", Component.getBuilder().setMaxDamage(429).setMaxStackSize(1).build()));
    public static ItemType DIAMOND_CHESTPLATE = register(new ItemType("diamond_chestplate", Component.getBuilder().setMaxDamage(528).setMaxStackSize(1).build()));
    public static ItemType DIAMOND_HELMET = register(new ItemType("diamond_helmet", Component.getBuilder().setMaxDamage(363).setMaxStackSize(1).build()));
    public static ItemType DIAMOND_HOE = register(new ItemType("diamond_hoe", Component.getBuilder().setMaxDamage(1561).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_diamond_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/hoe"), true, 8.0d)).setDamagePerBlock(2)).build()));
    public static ItemType DIAMOND_HORSE_ARMOR = register(new ItemType("diamond_horse_armor", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType DIAMOND_LEGGINGS = register(new ItemType("diamond_leggings", Component.getBuilder().setMaxDamage(495).setMaxStackSize(1).build()));
    public static ItemType DIAMOND_ORE = register(new ItemType("diamond_ore", Component.getBuilder().build()));
    public static ItemType DIAMOND_PICKAXE = register(new ItemType("diamond_pickaxe", Component.getBuilder().setMaxDamage(1561).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_diamond_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/pickaxe"), true, 8.0d)).setDamagePerBlock(2)).build()));
    public static ItemType DIAMOND_SHOVEL = register(new ItemType("diamond_shovel", Component.getBuilder().setMaxDamage(1561).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_diamond_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/shovel"), true, 8.0d)).setDamagePerBlock(2)).build()));
    public static ItemType DIAMOND_SWORD = register(new ItemType("diamond_sword", Component.getBuilder().setMaxDamage(1561).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("minecraft:cobweb"), true, 15.0d), new ToolRule(List.of("#minecraft:sword_efficient"), false, 1.5d)).setDamagePerBlock(2)).build()));
    public static ItemType DIORITE = register(new ItemType("diorite", Component.getBuilder().build()));
    public static ItemType DIORITE_SLAB = register(new ItemType("diorite_slab", Component.getBuilder().build()));
    public static ItemType DIORITE_STAIRS = register(new ItemType("diorite_stairs", Component.getBuilder().build()));
    public static ItemType DIORITE_WALL = register(new ItemType("diorite_wall", Component.getBuilder().build()));
    public static ItemType DIRT = register(new ItemType("dirt", Component.getBuilder().build()));
    public static ItemType DIRT_PATH = register(new ItemType("dirt_path", Component.getBuilder().build()));
    public static ItemType DISC_FRAGMENT_5 = register(new ItemType("disc_fragment_5", Component.getBuilder().build()));
    public static ItemType DISPENSER = register(new ItemType("dispenser", Component.getBuilder().build()));
    public static ItemType DOLPHIN_SPAWN_EGG = register(new ItemType("dolphin_spawn_egg", Component.getBuilder().build()));
    public static ItemType DONKEY_SPAWN_EGG = register(new ItemType("donkey_spawn_egg", Component.getBuilder().build()));
    public static ItemType DRAGON_BREATH = register(new ItemType("dragon_breath", Component.getBuilder().setRarity(Rarity.UNCOMMON).build()));
    public static ItemType DRAGON_EGG = register(new ItemType("dragon_egg", Component.getBuilder().setRarity(Rarity.EPIC).build()));
    public static ItemType DRAGON_HEAD = register(new ItemType("dragon_head", Component.getBuilder().setRarity(Rarity.UNCOMMON).build()));
    public static ItemType DRIED_KELP = register(new ItemType("dried_kelp", Component.getBuilder().build()));
    public static ItemType DRIED_KELP_BLOCK = register(new ItemType("dried_kelp_block", Component.getBuilder().build()));
    public static ItemType DRIPSTONE_BLOCK = register(new ItemType("dripstone_block", Component.getBuilder().build()));
    public static ItemType DROPPER = register(new ItemType("dropper", Component.getBuilder().build()));
    public static ItemType DROWNED_SPAWN_EGG = register(new ItemType("drowned_spawn_egg", Component.getBuilder().build()));
    public static ItemType DUNE_ARMOR_TRIM_SMITHING_TEMPLATE = register(new ItemType("dune_armor_trim_smithing_template", Component.getBuilder().build()));
    public static ItemType ECHO_SHARD = register(new ItemType("echo_shard", Component.getBuilder().build()));
    public static ItemType EGG = register(new ItemType("egg", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType ELDER_GUARDIAN_SPAWN_EGG = register(new ItemType("elder_guardian_spawn_egg", Component.getBuilder().build()));
    public static ItemType ELYTRA = register(new ItemType("elytra", Component.getBuilder().setMaxDamage(432).setMaxStackSize(1).setRarity(Rarity.UNCOMMON).build()));
    public static ItemType EMERALD = register(new ItemType("emerald", Component.getBuilder().build()));
    public static ItemType EMERALD_BLOCK = register(new ItemType("emerald_block", Component.getBuilder().build()));
    public static ItemType EMERALD_ORE = register(new ItemType("emerald_ore", Component.getBuilder().build()));
    public static ItemType ENCHANTED_BOOK = register(new ItemType("enchanted_book", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.UNCOMMON).setEnchantmentGlintOverride(true).build()));
    public static ItemType ENCHANTED_GOLDEN_APPLE = register(new ItemType("enchanted_golden_apple", Component.getBuilder().setRarity(Rarity.EPIC).setEnchantmentGlintOverride(true).build()));
    public static ItemType ENCHANTING_TABLE = register(new ItemType("enchanting_table", Component.getBuilder().build()));
    public static ItemType END_CRYSTAL = register(new ItemType("end_crystal", Component.getBuilder().setRarity(Rarity.RARE).setEnchantmentGlintOverride(true).build()));
    public static ItemType END_PORTAL_FRAME = register(new ItemType("end_portal_frame", Component.getBuilder().build()));
    public static ItemType END_ROD = register(new ItemType("end_rod", Component.getBuilder().build()));
    public static ItemType END_STONE = register(new ItemType("end_stone", Component.getBuilder().build()));
    public static ItemType END_STONE_BRICK_SLAB = register(new ItemType("end_stone_brick_slab", Component.getBuilder().build()));
    public static ItemType END_STONE_BRICK_STAIRS = register(new ItemType("end_stone_brick_stairs", Component.getBuilder().build()));
    public static ItemType END_STONE_BRICK_WALL = register(new ItemType("end_stone_brick_wall", Component.getBuilder().build()));
    public static ItemType END_STONE_BRICKS = register(new ItemType("end_stone_bricks", Component.getBuilder().build()));
    public static ItemType ENDER_CHEST = register(new ItemType("ender_chest", Component.getBuilder().build()));
    public static ItemType ENDER_DRAGON_SPAWN_EGG = register(new ItemType("ender_dragon_spawn_egg", Component.getBuilder().build()));
    public static ItemType ENDER_EYE = register(new ItemType("ender_eye", Component.getBuilder().build()));
    public static ItemType ENDER_PEARL = register(new ItemType("ender_pearl", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType ENDERMAN_SPAWN_EGG = register(new ItemType("enderman_spawn_egg", Component.getBuilder().build()));
    public static ItemType ENDERMITE_SPAWN_EGG = register(new ItemType("endermite_spawn_egg", Component.getBuilder().build()));
    public static ItemType EVOKER_SPAWN_EGG = register(new ItemType("evoker_spawn_egg", Component.getBuilder().build()));
    public static ItemType EXPERIENCE_BOTTLE = register(new ItemType("experience_bottle", Component.getBuilder().setRarity(Rarity.UNCOMMON).setEnchantmentGlintOverride(true).build()));
    public static ItemType EXPLORER_POTTERY_SHERD = register(new ItemType("explorer_pottery_sherd", Component.getBuilder().build()));
    public static ItemType EXPOSED_CHISELED_COPPER = register(new ItemType("exposed_chiseled_copper", Component.getBuilder().build()));
    public static ItemType EXPOSED_COPPER = register(new ItemType("exposed_copper", Component.getBuilder().build()));
    public static ItemType EXPOSED_COPPER_BULB = register(new ItemType("exposed_copper_bulb", Component.getBuilder().build()));
    public static ItemType EXPOSED_COPPER_DOOR = register(new ItemType("exposed_copper_door", Component.getBuilder().build()));
    public static ItemType EXPOSED_COPPER_GRATE = register(new ItemType("exposed_copper_grate", Component.getBuilder().build()));
    public static ItemType EXPOSED_COPPER_TRAPDOOR = register(new ItemType("exposed_copper_trapdoor", Component.getBuilder().build()));
    public static ItemType EXPOSED_CUT_COPPER = register(new ItemType("exposed_cut_copper", Component.getBuilder().build()));
    public static ItemType EXPOSED_CUT_COPPER_SLAB = register(new ItemType("exposed_cut_copper_slab", Component.getBuilder().build()));
    public static ItemType EXPOSED_CUT_COPPER_STAIRS = register(new ItemType("exposed_cut_copper_stairs", Component.getBuilder().build()));
    public static ItemType EYE_ARMOR_TRIM_SMITHING_TEMPLATE = register(new ItemType("eye_armor_trim_smithing_template", Component.getBuilder().build()));
    public static ItemType FARMLAND = register(new ItemType("farmland", Component.getBuilder().build()));
    public static ItemType FEATHER = register(new ItemType("feather", Component.getBuilder().build()));
    public static ItemType FERMENTED_SPIDER_EYE = register(new ItemType("fermented_spider_eye", Component.getBuilder().build()));
    public static ItemType FERN = register(new ItemType("fern", Component.getBuilder().build()));
    public static ItemType FILLED_MAP = register(new ItemType("filled_map", Component.getBuilder().setMapColor(4603950).build()));
    public static ItemType FIRE_CHARGE = register(new ItemType("fire_charge", Component.getBuilder().build()));
    public static ItemType FIRE_CORAL = register(new ItemType("fire_coral", Component.getBuilder().build()));
    public static ItemType FIRE_CORAL_BLOCK = register(new ItemType("fire_coral_block", Component.getBuilder().build()));
    public static ItemType FIRE_CORAL_FAN = register(new ItemType("fire_coral_fan", Component.getBuilder().build()));
    public static ItemType FIREWORK_ROCKET = register(new ItemType("firework_rocket", Component.getBuilder().build()));
    public static ItemType FIREWORK_STAR = register(new ItemType("firework_star", Component.getBuilder().build()));
    public static ItemType FISHING_ROD = register(new ItemType("fishing_rod", Component.getBuilder().setMaxDamage(64).setMaxStackSize(1).build()));
    public static ItemType FLETCHING_TABLE = register(new ItemType("fletching_table", Component.getBuilder().build()));
    public static ItemType FLINT = register(new ItemType("flint", Component.getBuilder().build()));
    public static ItemType FLINT_AND_STEEL = register(new ItemType("flint_and_steel", Component.getBuilder().setMaxDamage(64).setMaxStackSize(1).build()));
    public static ItemType FLOW_ARMOR_TRIM_SMITHING_TEMPLATE = register(new ItemType("flow_armor_trim_smithing_template", Component.getBuilder().build()));
    public static ItemType FLOW_BANNER_PATTERN = register(new ItemType("flow_banner_pattern", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
    public static ItemType FLOW_POTTERY_SHERD = register(new ItemType("flow_pottery_sherd", Component.getBuilder().build()));
    public static ItemType FLOWER_BANNER_PATTERN = register(new ItemType("flower_banner_pattern", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType FLOWER_POT = register(new ItemType("flower_pot", Component.getBuilder().build()));
    public static ItemType FLOWERING_AZALEA = register(new ItemType("flowering_azalea", Component.getBuilder().build()));
    public static ItemType FLOWERING_AZALEA_LEAVES = register(new ItemType("flowering_azalea_leaves", Component.getBuilder().build()));
    public static ItemType FOX_SPAWN_EGG = register(new ItemType("fox_spawn_egg", Component.getBuilder().build()));
    public static ItemType FRIEND_POTTERY_SHERD = register(new ItemType("friend_pottery_sherd", Component.getBuilder().build()));
    public static ItemType FROG_SPAWN_EGG = register(new ItemType("frog_spawn_egg", Component.getBuilder().build()));
    public static ItemType FROGSPAWN = register(new ItemType("frogspawn", Component.getBuilder().build()));
    public static ItemType FURNACE = register(new ItemType("furnace", Component.getBuilder().build()));
    public static ItemType FURNACE_MINECART = register(new ItemType("furnace_minecart", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType GHAST_SPAWN_EGG = register(new ItemType("ghast_spawn_egg", Component.getBuilder().build()));
    public static ItemType GHAST_TEAR = register(new ItemType("ghast_tear", Component.getBuilder().build()));
    public static ItemType GILDED_BLACKSTONE = register(new ItemType("gilded_blackstone", Component.getBuilder().build()));
    public static ItemType GLASS = register(new ItemType("glass", Component.getBuilder().build()));
    public static ItemType GLASS_BOTTLE = register(new ItemType("glass_bottle", Component.getBuilder().build()));
    public static ItemType GLASS_PANE = register(new ItemType("glass_pane", Component.getBuilder().build()));
    public static ItemType GLISTERING_MELON_SLICE = register(new ItemType("glistering_melon_slice", Component.getBuilder().build()));
    public static ItemType GLOBE_BANNER_PATTERN = register(new ItemType("globe_banner_pattern", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType GLOW_BERRIES = register(new ItemType("glow_berries", Component.getBuilder().build()));
    public static ItemType GLOW_INK_SAC = register(new ItemType("glow_ink_sac", Component.getBuilder().build()));
    public static ItemType GLOW_ITEM_FRAME = register(new ItemType("glow_item_frame", Component.getBuilder().build()));
    public static ItemType GLOW_LICHEN = register(new ItemType("glow_lichen", Component.getBuilder().build()));
    public static ItemType GLOW_SQUID_SPAWN_EGG = register(new ItemType("glow_squid_spawn_egg", Component.getBuilder().build()));
    public static ItemType GLOWSTONE = register(new ItemType("glowstone", Component.getBuilder().build()));
    public static ItemType GLOWSTONE_DUST = register(new ItemType("glowstone_dust", Component.getBuilder().build()));
    public static ItemType GOAT_HORN = register(new ItemType("goat_horn", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType GOAT_SPAWN_EGG = register(new ItemType("goat_spawn_egg", Component.getBuilder().build()));
    public static ItemType GOLD_BLOCK = register(new ItemType("gold_block", Component.getBuilder().build()));
    public static ItemType GOLD_INGOT = register(new ItemType("gold_ingot", Component.getBuilder().build()));
    public static ItemType GOLD_NUGGET = register(new ItemType("gold_nugget", Component.getBuilder().build()));
    public static ItemType GOLD_ORE = register(new ItemType("gold_ore", Component.getBuilder().build()));
    public static ItemType GOLDEN_APPLE = register(new ItemType("golden_apple", Component.getBuilder().setRarity(Rarity.RARE).build()));
    public static ItemType GOLDEN_AXE = register(new ItemType("golden_axe", Component.getBuilder().setMaxDamage(32).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_gold_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/axe"), true, 12.0d)).setDamagePerBlock(2)).build()));
    public static ItemType GOLDEN_BOOTS = register(new ItemType("golden_boots", Component.getBuilder().setMaxDamage(91).setMaxStackSize(1).build()));
    public static ItemType GOLDEN_CARROT = register(new ItemType("golden_carrot", Component.getBuilder().build()));
    public static ItemType GOLDEN_CHESTPLATE = register(new ItemType("golden_chestplate", Component.getBuilder().setMaxDamage(112).setMaxStackSize(1).build()));
    public static ItemType GOLDEN_HELMET = register(new ItemType("golden_helmet", Component.getBuilder().setMaxDamage(77).setMaxStackSize(1).build()));
    public static ItemType GOLDEN_HOE = register(new ItemType("golden_hoe", Component.getBuilder().setMaxDamage(32).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_gold_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/hoe"), true, 12.0d)).setDamagePerBlock(2)).build()));
    public static ItemType GOLDEN_HORSE_ARMOR = register(new ItemType("golden_horse_armor", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType GOLDEN_LEGGINGS = register(new ItemType("golden_leggings", Component.getBuilder().setMaxDamage(105).setMaxStackSize(1).build()));
    public static ItemType GOLDEN_PICKAXE = register(new ItemType("golden_pickaxe", Component.getBuilder().setMaxDamage(32).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_gold_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/pickaxe"), true, 12.0d)).setDamagePerBlock(2)).build()));
    public static ItemType GOLDEN_SHOVEL = register(new ItemType("golden_shovel", Component.getBuilder().setMaxDamage(32).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_gold_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/shovel"), true, 12.0d)).setDamagePerBlock(2)).build()));
    public static ItemType GOLDEN_SWORD = register(new ItemType("golden_sword", Component.getBuilder().setMaxDamage(32).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("minecraft:cobweb"), true, 15.0d), new ToolRule(List.of("#minecraft:sword_efficient"), false, 1.5d)).setDamagePerBlock(2)).build()));
    public static ItemType GRANITE = register(new ItemType("granite", Component.getBuilder().build()));
    public static ItemType GRANITE_SLAB = register(new ItemType("granite_slab", Component.getBuilder().build()));
    public static ItemType GRANITE_STAIRS = register(new ItemType("granite_stairs", Component.getBuilder().build()));
    public static ItemType GRANITE_WALL = register(new ItemType("granite_wall", Component.getBuilder().build()));
    public static ItemType GRASS_BLOCK = register(new ItemType("grass_block", Component.getBuilder().build()));
    public static ItemType GRAVEL = register(new ItemType("gravel", Component.getBuilder().build()));
    public static ItemType GRAY_BANNER = register(new ItemType("gray_banner", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType GRAY_BED = register(new ItemType("gray_bed", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType GRAY_CANDLE = register(new ItemType("gray_candle", Component.getBuilder().build()));
    public static ItemType GRAY_CARPET = register(new ItemType("gray_carpet", Component.getBuilder().build()));
    public static ItemType GRAY_CONCRETE = register(new ItemType("gray_concrete", Component.getBuilder().build()));
    public static ItemType GRAY_CONCRETE_POWDER = register(new ItemType("gray_concrete_powder", Component.getBuilder().build()));
    public static ItemType GRAY_DYE = register(new ItemType("gray_dye", Component.getBuilder().build()));
    public static ItemType GRAY_GLAZED_TERRACOTTA = register(new ItemType("gray_glazed_terracotta", Component.getBuilder().build()));
    public static ItemType GRAY_SHULKER_BOX = register(new ItemType("gray_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType GRAY_STAINED_GLASS = register(new ItemType("gray_stained_glass", Component.getBuilder().build()));
    public static ItemType GRAY_STAINED_GLASS_PANE = register(new ItemType("gray_stained_glass_pane", Component.getBuilder().build()));
    public static ItemType GRAY_TERRACOTTA = register(new ItemType("gray_terracotta", Component.getBuilder().build()));
    public static ItemType GRAY_WOOL = register(new ItemType("gray_wool", Component.getBuilder().build()));
    public static ItemType GREEN_BANNER = register(new ItemType("green_banner", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType GREEN_BED = register(new ItemType("green_bed", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType GREEN_CANDLE = register(new ItemType("green_candle", Component.getBuilder().build()));
    public static ItemType GREEN_CARPET = register(new ItemType("green_carpet", Component.getBuilder().build()));
    public static ItemType GREEN_CONCRETE = register(new ItemType("green_concrete", Component.getBuilder().build()));
    public static ItemType GREEN_CONCRETE_POWDER = register(new ItemType("green_concrete_powder", Component.getBuilder().build()));
    public static ItemType GREEN_DYE = register(new ItemType("green_dye", Component.getBuilder().build()));
    public static ItemType GREEN_GLAZED_TERRACOTTA = register(new ItemType("green_glazed_terracotta", Component.getBuilder().build()));
    public static ItemType GREEN_SHULKER_BOX = register(new ItemType("green_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType GREEN_STAINED_GLASS = register(new ItemType("green_stained_glass", Component.getBuilder().build()));
    public static ItemType GREEN_STAINED_GLASS_PANE = register(new ItemType("green_stained_glass_pane", Component.getBuilder().build()));
    public static ItemType GREEN_TERRACOTTA = register(new ItemType("green_terracotta", Component.getBuilder().build()));
    public static ItemType GREEN_WOOL = register(new ItemType("green_wool", Component.getBuilder().build()));
    public static ItemType GRINDSTONE = register(new ItemType("grindstone", Component.getBuilder().build()));
    public static ItemType GUARDIAN_SPAWN_EGG = register(new ItemType("guardian_spawn_egg", Component.getBuilder().build()));
    public static ItemType GUNPOWDER = register(new ItemType("gunpowder", Component.getBuilder().build()));
    public static ItemType GUSTER_BANNER_PATTERN = register(new ItemType("guster_banner_pattern", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
    public static ItemType GUSTER_POTTERY_SHERD = register(new ItemType("guster_pottery_sherd", Component.getBuilder().build()));
    public static ItemType HANGING_ROOTS = register(new ItemType("hanging_roots", Component.getBuilder().build()));
    public static ItemType HAY_BLOCK = register(new ItemType("hay_block", Component.getBuilder().build()));
    public static ItemType HEART_OF_THE_SEA = register(new ItemType("heart_of_the_sea", Component.getBuilder().setRarity(Rarity.UNCOMMON).build()));
    public static ItemType HEART_POTTERY_SHERD = register(new ItemType("heart_pottery_sherd", Component.getBuilder().build()));
    public static ItemType HEARTBREAK_POTTERY_SHERD = register(new ItemType("heartbreak_pottery_sherd", Component.getBuilder().build()));
    public static ItemType HEAVY_CORE = register(new ItemType("heavy_core", Component.getBuilder().setRarity(Rarity.EPIC).build()));
    public static ItemType HEAVY_WEIGHTED_PRESSURE_PLATE = register(new ItemType("heavy_weighted_pressure_plate", Component.getBuilder().build()));
    public static ItemType HOGLIN_SPAWN_EGG = register(new ItemType("hoglin_spawn_egg", Component.getBuilder().build()));
    public static ItemType HONEY_BLOCK = register(new ItemType("honey_block", Component.getBuilder().build()));
    public static ItemType HONEY_BOTTLE = register(new ItemType("honey_bottle", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType HONEYCOMB = register(new ItemType("honeycomb", Component.getBuilder().build()));
    public static ItemType HONEYCOMB_BLOCK = register(new ItemType("honeycomb_block", Component.getBuilder().build()));
    public static ItemType HOPPER = register(new ItemType("hopper", Component.getBuilder().build()));
    public static ItemType HOPPER_MINECART = register(new ItemType("hopper_minecart", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType HORN_CORAL = register(new ItemType("horn_coral", Component.getBuilder().build()));
    public static ItemType HORN_CORAL_BLOCK = register(new ItemType("horn_coral_block", Component.getBuilder().build()));
    public static ItemType HORN_CORAL_FAN = register(new ItemType("horn_coral_fan", Component.getBuilder().build()));
    public static ItemType HORSE_SPAWN_EGG = register(new ItemType("horse_spawn_egg", Component.getBuilder().build()));
    public static ItemType HOST_ARMOR_TRIM_SMITHING_TEMPLATE = register(new ItemType("host_armor_trim_smithing_template", Component.getBuilder().build()));
    public static ItemType HOWL_POTTERY_SHERD = register(new ItemType("howl_pottery_sherd", Component.getBuilder().build()));
    public static ItemType HUSK_SPAWN_EGG = register(new ItemType("husk_spawn_egg", Component.getBuilder().build()));
    public static ItemType ICE = register(new ItemType("ice", Component.getBuilder().build()));
    public static ItemType INFESTED_CHISELED_STONE_BRICKS = register(new ItemType("infested_chiseled_stone_bricks", Component.getBuilder().build()));
    public static ItemType INFESTED_COBBLESTONE = register(new ItemType("infested_cobblestone", Component.getBuilder().build()));
    public static ItemType INFESTED_CRACKED_STONE_BRICKS = register(new ItemType("infested_cracked_stone_bricks", Component.getBuilder().build()));
    public static ItemType INFESTED_DEEPSLATE = register(new ItemType("infested_deepslate", Component.getBuilder().build()));
    public static ItemType INFESTED_MOSSY_STONE_BRICKS = register(new ItemType("infested_mossy_stone_bricks", Component.getBuilder().build()));
    public static ItemType INFESTED_STONE = register(new ItemType("infested_stone", Component.getBuilder().build()));
    public static ItemType INFESTED_STONE_BRICKS = register(new ItemType("infested_stone_bricks", Component.getBuilder().build()));
    public static ItemType INK_SAC = register(new ItemType("ink_sac", Component.getBuilder().build()));
    public static ItemType IRON_AXE = register(new ItemType("iron_axe", Component.getBuilder().setMaxDamage(250).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_iron_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/axe"), true, 6.0d)).setDamagePerBlock(2)).build()));
    public static ItemType IRON_BARS = register(new ItemType("iron_bars", Component.getBuilder().build()));
    public static ItemType IRON_BLOCK = register(new ItemType("iron_block", Component.getBuilder().build()));
    public static ItemType IRON_BOOTS = register(new ItemType("iron_boots", Component.getBuilder().setMaxDamage(195).setMaxStackSize(1).build()));
    public static ItemType IRON_CHESTPLATE = register(new ItemType("iron_chestplate", Component.getBuilder().setMaxDamage(240).setMaxStackSize(1).build()));
    public static ItemType IRON_DOOR = register(new ItemType("iron_door", Component.getBuilder().build()));
    public static ItemType IRON_GOLEM_SPAWN_EGG = register(new ItemType("iron_golem_spawn_egg", Component.getBuilder().build()));
    public static ItemType IRON_HELMET = register(new ItemType("iron_helmet", Component.getBuilder().setMaxDamage(165).setMaxStackSize(1).build()));
    public static ItemType IRON_HOE = register(new ItemType("iron_hoe", Component.getBuilder().setMaxDamage(250).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_iron_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/hoe"), true, 6.0d)).setDamagePerBlock(2)).build()));
    public static ItemType IRON_HORSE_ARMOR = register(new ItemType("iron_horse_armor", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType IRON_INGOT = register(new ItemType("iron_ingot", Component.getBuilder().build()));
    public static ItemType IRON_LEGGINGS = register(new ItemType("iron_leggings", Component.getBuilder().setMaxDamage(225).setMaxStackSize(1).build()));
    public static ItemType IRON_NUGGET = register(new ItemType("iron_nugget", Component.getBuilder().build()));
    public static ItemType IRON_ORE = register(new ItemType("iron_ore", Component.getBuilder().build()));
    public static ItemType IRON_PICKAXE = register(new ItemType("iron_pickaxe", Component.getBuilder().setMaxDamage(250).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_iron_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/pickaxe"), true, 6.0d)).setDamagePerBlock(2)).build()));
    public static ItemType IRON_SHOVEL = register(new ItemType("iron_shovel", Component.getBuilder().setMaxDamage(250).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_iron_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/shovel"), true, 6.0d)).setDamagePerBlock(2)).build()));
    public static ItemType IRON_SWORD = register(new ItemType("iron_sword", Component.getBuilder().setMaxDamage(250).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("minecraft:cobweb"), true, 15.0d), new ToolRule(List.of("#minecraft:sword_efficient"), false, 1.5d)).setDamagePerBlock(2)).build()));
    public static ItemType IRON_TRAPDOOR = register(new ItemType("iron_trapdoor", Component.getBuilder().build()));
    public static ItemType ITEM_FRAME = register(new ItemType("item_frame", Component.getBuilder().build()));
    public static ItemType JACK_O_LANTERN = register(new ItemType("jack_o_lantern", Component.getBuilder().build()));
    public static ItemType JIGSAW = register(new ItemType("jigsaw", Component.getBuilder().setRarity(Rarity.EPIC).build()));
    public static ItemType JUKEBOX = register(new ItemType("jukebox", Component.getBuilder().build()));
    public static ItemType JUNGLE_BOAT = register(new ItemType("jungle_boat", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType JUNGLE_BUTTON = register(new ItemType("jungle_button", Component.getBuilder().build()));
    public static ItemType JUNGLE_CHEST_BOAT = register(new ItemType("jungle_chest_boat", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType JUNGLE_DOOR = register(new ItemType("jungle_door", Component.getBuilder().build()));
    public static ItemType JUNGLE_FENCE = register(new ItemType("jungle_fence", Component.getBuilder().build()));
    public static ItemType JUNGLE_FENCE_GATE = register(new ItemType("jungle_fence_gate", Component.getBuilder().build()));
    public static ItemType JUNGLE_HANGING_SIGN = register(new ItemType("jungle_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType JUNGLE_LEAVES = register(new ItemType("jungle_leaves", Component.getBuilder().build()));
    public static ItemType JUNGLE_LOG = register(new ItemType("jungle_log", Component.getBuilder().build()));
    public static ItemType JUNGLE_PLANKS = register(new ItemType("jungle_planks", Component.getBuilder().build()));
    public static ItemType JUNGLE_PRESSURE_PLATE = register(new ItemType("jungle_pressure_plate", Component.getBuilder().build()));
    public static ItemType JUNGLE_SAPLING = register(new ItemType("jungle_sapling", Component.getBuilder().build()));
    public static ItemType JUNGLE_SIGN = register(new ItemType("jungle_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType JUNGLE_SLAB = register(new ItemType("jungle_slab", Component.getBuilder().build()));
    public static ItemType JUNGLE_STAIRS = register(new ItemType("jungle_stairs", Component.getBuilder().build()));
    public static ItemType JUNGLE_TRAPDOOR = register(new ItemType("jungle_trapdoor", Component.getBuilder().build()));
    public static ItemType JUNGLE_WOOD = register(new ItemType("jungle_wood", Component.getBuilder().build()));
    public static ItemType KELP = register(new ItemType("kelp", Component.getBuilder().build()));
    public static ItemType KNOWLEDGE_BOOK = register(new ItemType("knowledge_book", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.EPIC).build()));
    public static ItemType LADDER = register(new ItemType("ladder", Component.getBuilder().build()));
    public static ItemType LANTERN = register(new ItemType("lantern", Component.getBuilder().build()));
    public static ItemType LAPIS_BLOCK = register(new ItemType("lapis_block", Component.getBuilder().build()));
    public static ItemType LAPIS_LAZULI = register(new ItemType("lapis_lazuli", Component.getBuilder().build()));
    public static ItemType LAPIS_ORE = register(new ItemType("lapis_ore", Component.getBuilder().build()));
    public static ItemType LARGE_AMETHYST_BUD = register(new ItemType("large_amethyst_bud", Component.getBuilder().build()));
    public static ItemType LARGE_FERN = register(new ItemType("large_fern", Component.getBuilder().build()));
    public static ItemType LAVA_BUCKET = register(new ItemType("lava_bucket", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType LEAD = register(new ItemType("lead", Component.getBuilder().build()));
    public static ItemType LEATHER = register(new ItemType("leather", Component.getBuilder().build()));
    public static ItemType LEATHER_BOOTS = register(new ItemType("leather_boots", Component.getBuilder().setMaxDamage(65).setMaxStackSize(1).build()));
    public static ItemType LEATHER_CHESTPLATE = register(new ItemType("leather_chestplate", Component.getBuilder().setMaxDamage(80).setMaxStackSize(1).build()));
    public static ItemType LEATHER_HELMET = register(new ItemType("leather_helmet", Component.getBuilder().setMaxDamage(55).setMaxStackSize(1).build()));
    public static ItemType LEATHER_HORSE_ARMOR = register(new ItemType("leather_horse_armor", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType LEATHER_LEGGINGS = register(new ItemType("leather_leggings", Component.getBuilder().setMaxDamage(75).setMaxStackSize(1).build()));
    public static ItemType LECTERN = register(new ItemType("lectern", Component.getBuilder().build()));
    public static ItemType LEVER = register(new ItemType("lever", Component.getBuilder().build()));
    public static ItemType LIGHT = register(new ItemType("light", Component.getBuilder().setRarity(Rarity.EPIC).build()));
    public static ItemType LIGHT_BLUE_BANNER = register(new ItemType("light_blue_banner", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType LIGHT_BLUE_BED = register(new ItemType("light_blue_bed", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType LIGHT_BLUE_CANDLE = register(new ItemType("light_blue_candle", Component.getBuilder().build()));
    public static ItemType LIGHT_BLUE_CARPET = register(new ItemType("light_blue_carpet", Component.getBuilder().build()));
    public static ItemType LIGHT_BLUE_CONCRETE = register(new ItemType("light_blue_concrete", Component.getBuilder().build()));
    public static ItemType LIGHT_BLUE_CONCRETE_POWDER = register(new ItemType("light_blue_concrete_powder", Component.getBuilder().build()));
    public static ItemType LIGHT_BLUE_DYE = register(new ItemType("light_blue_dye", Component.getBuilder().build()));
    public static ItemType LIGHT_BLUE_GLAZED_TERRACOTTA = register(new ItemType("light_blue_glazed_terracotta", Component.getBuilder().build()));
    public static ItemType LIGHT_BLUE_SHULKER_BOX = register(new ItemType("light_blue_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType LIGHT_BLUE_STAINED_GLASS = register(new ItemType("light_blue_stained_glass", Component.getBuilder().build()));
    public static ItemType LIGHT_BLUE_STAINED_GLASS_PANE = register(new ItemType("light_blue_stained_glass_pane", Component.getBuilder().build()));
    public static ItemType LIGHT_BLUE_TERRACOTTA = register(new ItemType("light_blue_terracotta", Component.getBuilder().build()));
    public static ItemType LIGHT_BLUE_WOOL = register(new ItemType("light_blue_wool", Component.getBuilder().build()));
    public static ItemType LIGHT_GRAY_BANNER = register(new ItemType("light_gray_banner", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType LIGHT_GRAY_BED = register(new ItemType("light_gray_bed", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType LIGHT_GRAY_CANDLE = register(new ItemType("light_gray_candle", Component.getBuilder().build()));
    public static ItemType LIGHT_GRAY_CARPET = register(new ItemType("light_gray_carpet", Component.getBuilder().build()));
    public static ItemType LIGHT_GRAY_CONCRETE = register(new ItemType("light_gray_concrete", Component.getBuilder().build()));
    public static ItemType LIGHT_GRAY_CONCRETE_POWDER = register(new ItemType("light_gray_concrete_powder", Component.getBuilder().build()));
    public static ItemType LIGHT_GRAY_DYE = register(new ItemType("light_gray_dye", Component.getBuilder().build()));
    public static ItemType LIGHT_GRAY_GLAZED_TERRACOTTA = register(new ItemType("light_gray_glazed_terracotta", Component.getBuilder().build()));
    public static ItemType LIGHT_GRAY_SHULKER_BOX = register(new ItemType("light_gray_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType LIGHT_GRAY_STAINED_GLASS = register(new ItemType("light_gray_stained_glass", Component.getBuilder().build()));
    public static ItemType LIGHT_GRAY_STAINED_GLASS_PANE = register(new ItemType("light_gray_stained_glass_pane", Component.getBuilder().build()));
    public static ItemType LIGHT_GRAY_TERRACOTTA = register(new ItemType("light_gray_terracotta", Component.getBuilder().build()));
    public static ItemType LIGHT_GRAY_WOOL = register(new ItemType("light_gray_wool", Component.getBuilder().build()));
    public static ItemType LIGHT_WEIGHTED_PRESSURE_PLATE = register(new ItemType("light_weighted_pressure_plate", Component.getBuilder().build()));
    public static ItemType LIGHTNING_ROD = register(new ItemType("lightning_rod", Component.getBuilder().build()));
    public static ItemType LILAC = register(new ItemType("lilac", Component.getBuilder().build()));
    public static ItemType LILY_OF_THE_VALLEY = register(new ItemType("lily_of_the_valley", Component.getBuilder().build()));
    public static ItemType LILY_PAD = register(new ItemType("lily_pad", Component.getBuilder().build()));
    public static ItemType LIME_BANNER = register(new ItemType("lime_banner", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType LIME_BED = register(new ItemType("lime_bed", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType LIME_CANDLE = register(new ItemType("lime_candle", Component.getBuilder().build()));
    public static ItemType LIME_CARPET = register(new ItemType("lime_carpet", Component.getBuilder().build()));
    public static ItemType LIME_CONCRETE = register(new ItemType("lime_concrete", Component.getBuilder().build()));
    public static ItemType LIME_CONCRETE_POWDER = register(new ItemType("lime_concrete_powder", Component.getBuilder().build()));
    public static ItemType LIME_DYE = register(new ItemType("lime_dye", Component.getBuilder().build()));
    public static ItemType LIME_GLAZED_TERRACOTTA = register(new ItemType("lime_glazed_terracotta", Component.getBuilder().build()));
    public static ItemType LIME_SHULKER_BOX = register(new ItemType("lime_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType LIME_STAINED_GLASS = register(new ItemType("lime_stained_glass", Component.getBuilder().build()));
    public static ItemType LIME_STAINED_GLASS_PANE = register(new ItemType("lime_stained_glass_pane", Component.getBuilder().build()));
    public static ItemType LIME_TERRACOTTA = register(new ItemType("lime_terracotta", Component.getBuilder().build()));
    public static ItemType LIME_WOOL = register(new ItemType("lime_wool", Component.getBuilder().build()));
    public static ItemType LINGERING_POTION = register(new ItemType("lingering_potion", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType LLAMA_SPAWN_EGG = register(new ItemType("llama_spawn_egg", Component.getBuilder().build()));
    public static ItemType LODESTONE = register(new ItemType("lodestone", Component.getBuilder().build()));
    public static ItemType LOOM = register(new ItemType("loom", Component.getBuilder().build()));
    public static ItemType MACE = register(new ItemType("mace", Component.getBuilder().setMaxDamage(500).setMaxStackSize(1).setRarity(Rarity.EPIC).build()));
    public static ItemType MAGENTA_BANNER = register(new ItemType("magenta_banner", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType MAGENTA_BED = register(new ItemType("magenta_bed", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType MAGENTA_CANDLE = register(new ItemType("magenta_candle", Component.getBuilder().build()));
    public static ItemType MAGENTA_CARPET = register(new ItemType("magenta_carpet", Component.getBuilder().build()));
    public static ItemType MAGENTA_CONCRETE = register(new ItemType("magenta_concrete", Component.getBuilder().build()));
    public static ItemType MAGENTA_CONCRETE_POWDER = register(new ItemType("magenta_concrete_powder", Component.getBuilder().build()));
    public static ItemType MAGENTA_DYE = register(new ItemType("magenta_dye", Component.getBuilder().build()));
    public static ItemType MAGENTA_GLAZED_TERRACOTTA = register(new ItemType("magenta_glazed_terracotta", Component.getBuilder().build()));
    public static ItemType MAGENTA_SHULKER_BOX = register(new ItemType("magenta_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType MAGENTA_STAINED_GLASS = register(new ItemType("magenta_stained_glass", Component.getBuilder().build()));
    public static ItemType MAGENTA_STAINED_GLASS_PANE = register(new ItemType("magenta_stained_glass_pane", Component.getBuilder().build()));
    public static ItemType MAGENTA_TERRACOTTA = register(new ItemType("magenta_terracotta", Component.getBuilder().build()));
    public static ItemType MAGENTA_WOOL = register(new ItemType("magenta_wool", Component.getBuilder().build()));
    public static ItemType MAGMA_BLOCK = register(new ItemType("magma_block", Component.getBuilder().build()));
    public static ItemType MAGMA_CREAM = register(new ItemType("magma_cream", Component.getBuilder().build()));
    public static ItemType MAGMA_CUBE_SPAWN_EGG = register(new ItemType("magma_cube_spawn_egg", Component.getBuilder().build()));
    public static ItemType MANGROVE_BOAT = register(new ItemType("mangrove_boat", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType MANGROVE_BUTTON = register(new ItemType("mangrove_button", Component.getBuilder().build()));
    public static ItemType MANGROVE_CHEST_BOAT = register(new ItemType("mangrove_chest_boat", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType MANGROVE_DOOR = register(new ItemType("mangrove_door", Component.getBuilder().build()));
    public static ItemType MANGROVE_FENCE = register(new ItemType("mangrove_fence", Component.getBuilder().build()));
    public static ItemType MANGROVE_FENCE_GATE = register(new ItemType("mangrove_fence_gate", Component.getBuilder().build()));
    public static ItemType MANGROVE_HANGING_SIGN = register(new ItemType("mangrove_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType MANGROVE_LEAVES = register(new ItemType("mangrove_leaves", Component.getBuilder().build()));
    public static ItemType MANGROVE_LOG = register(new ItemType("mangrove_log", Component.getBuilder().build()));
    public static ItemType MANGROVE_PLANKS = register(new ItemType("mangrove_planks", Component.getBuilder().build()));
    public static ItemType MANGROVE_PRESSURE_PLATE = register(new ItemType("mangrove_pressure_plate", Component.getBuilder().build()));
    public static ItemType MANGROVE_PROPAGULE = register(new ItemType("mangrove_propagule", Component.getBuilder().build()));
    public static ItemType MANGROVE_ROOTS = register(new ItemType("mangrove_roots", Component.getBuilder().build()));
    public static ItemType MANGROVE_SIGN = register(new ItemType("mangrove_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType MANGROVE_SLAB = register(new ItemType("mangrove_slab", Component.getBuilder().build()));
    public static ItemType MANGROVE_STAIRS = register(new ItemType("mangrove_stairs", Component.getBuilder().build()));
    public static ItemType MANGROVE_TRAPDOOR = register(new ItemType("mangrove_trapdoor", Component.getBuilder().build()));
    public static ItemType MANGROVE_WOOD = register(new ItemType("mangrove_wood", Component.getBuilder().build()));
    public static ItemType MAP = register(new ItemType("map", Component.getBuilder().build()));
    public static ItemType MEDIUM_AMETHYST_BUD = register(new ItemType("medium_amethyst_bud", Component.getBuilder().build()));
    public static ItemType MELON = register(new ItemType("melon", Component.getBuilder().build()));
    public static ItemType MELON_SEEDS = register(new ItemType("melon_seeds", Component.getBuilder().build()));
    public static ItemType MELON_SLICE = register(new ItemType("melon_slice", Component.getBuilder().build()));
    public static ItemType MILK_BUCKET = register(new ItemType("milk_bucket", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType MINECART = register(new ItemType("minecart", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType MINER_POTTERY_SHERD = register(new ItemType("miner_pottery_sherd", Component.getBuilder().build()));
    public static ItemType MOJANG_BANNER_PATTERN = register(new ItemType("mojang_banner_pattern", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.EPIC).build()));
    public static ItemType MOOSHROOM_SPAWN_EGG = register(new ItemType("mooshroom_spawn_egg", Component.getBuilder().build()));
    public static ItemType MOSS_BLOCK = register(new ItemType("moss_block", Component.getBuilder().build()));
    public static ItemType MOSS_CARPET = register(new ItemType("moss_carpet", Component.getBuilder().build()));
    public static ItemType MOSSY_COBBLESTONE = register(new ItemType("mossy_cobblestone", Component.getBuilder().build()));
    public static ItemType MOSSY_COBBLESTONE_SLAB = register(new ItemType("mossy_cobblestone_slab", Component.getBuilder().build()));
    public static ItemType MOSSY_COBBLESTONE_STAIRS = register(new ItemType("mossy_cobblestone_stairs", Component.getBuilder().build()));
    public static ItemType MOSSY_COBBLESTONE_WALL = register(new ItemType("mossy_cobblestone_wall", Component.getBuilder().build()));
    public static ItemType MOSSY_STONE_BRICK_SLAB = register(new ItemType("mossy_stone_brick_slab", Component.getBuilder().build()));
    public static ItemType MOSSY_STONE_BRICK_STAIRS = register(new ItemType("mossy_stone_brick_stairs", Component.getBuilder().build()));
    public static ItemType MOSSY_STONE_BRICK_WALL = register(new ItemType("mossy_stone_brick_wall", Component.getBuilder().build()));
    public static ItemType MOSSY_STONE_BRICKS = register(new ItemType("mossy_stone_bricks", Component.getBuilder().build()));
    public static ItemType MOURNER_POTTERY_SHERD = register(new ItemType("mourner_pottery_sherd", Component.getBuilder().build()));
    public static ItemType MUD = register(new ItemType("mud", Component.getBuilder().build()));
    public static ItemType MUD_BRICK_SLAB = register(new ItemType("mud_brick_slab", Component.getBuilder().build()));
    public static ItemType MUD_BRICK_STAIRS = register(new ItemType("mud_brick_stairs", Component.getBuilder().build()));
    public static ItemType MUD_BRICK_WALL = register(new ItemType("mud_brick_wall", Component.getBuilder().build()));
    public static ItemType MUD_BRICKS = register(new ItemType("mud_bricks", Component.getBuilder().build()));
    public static ItemType MUDDY_MANGROVE_ROOTS = register(new ItemType("muddy_mangrove_roots", Component.getBuilder().build()));
    public static ItemType MULE_SPAWN_EGG = register(new ItemType("mule_spawn_egg", Component.getBuilder().build()));
    public static ItemType MUSHROOM_STEM = register(new ItemType("mushroom_stem", Component.getBuilder().build()));
    public static ItemType MUSHROOM_STEW = register(new ItemType("mushroom_stew", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType MUSIC_DISC_11 = register(new ItemType("music_disc_11", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
    public static ItemType MUSIC_DISC_13 = register(new ItemType("music_disc_13", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
    public static ItemType MUSIC_DISC_5 = register(new ItemType("music_disc_5", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
    public static ItemType MUSIC_DISC_BLOCKS = register(new ItemType("music_disc_blocks", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
    public static ItemType MUSIC_DISC_CAT = register(new ItemType("music_disc_cat", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
    public static ItemType MUSIC_DISC_CHIRP = register(new ItemType("music_disc_chirp", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
    public static ItemType MUSIC_DISC_CREATOR = register(new ItemType("music_disc_creator", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
    public static ItemType MUSIC_DISC_CREATOR_MUSIC_BOX = register(new ItemType("music_disc_creator_music_box", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
    public static ItemType MUSIC_DISC_FAR = register(new ItemType("music_disc_far", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
    public static ItemType MUSIC_DISC_MALL = register(new ItemType("music_disc_mall", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
    public static ItemType MUSIC_DISC_MELLOHI = register(new ItemType("music_disc_mellohi", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
    public static ItemType MUSIC_DISC_OTHERSIDE = register(new ItemType("music_disc_otherside", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
    public static ItemType MUSIC_DISC_PIGSTEP = register(new ItemType("music_disc_pigstep", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
    public static ItemType MUSIC_DISC_PRECIPICE = register(new ItemType("music_disc_precipice", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
    public static ItemType MUSIC_DISC_RELIC = register(new ItemType("music_disc_relic", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
    public static ItemType MUSIC_DISC_STAL = register(new ItemType("music_disc_stal", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
    public static ItemType MUSIC_DISC_STRAD = register(new ItemType("music_disc_strad", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
    public static ItemType MUSIC_DISC_WAIT = register(new ItemType("music_disc_wait", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
    public static ItemType MUSIC_DISC_WARD = register(new ItemType("music_disc_ward", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.RARE).build()));
    public static ItemType MUTTON = register(new ItemType("mutton", Component.getBuilder().build()));
    public static ItemType MYCELIUM = register(new ItemType("mycelium", Component.getBuilder().build()));
    public static ItemType NAME_TAG = register(new ItemType("name_tag", Component.getBuilder().build()));
    public static ItemType NAUTILUS_SHELL = register(new ItemType("nautilus_shell", Component.getBuilder().build()));
    public static ItemType NETHER_BRICK = register(new ItemType("nether_brick", Component.getBuilder().build()));
    public static ItemType NETHER_BRICK_FENCE = register(new ItemType("nether_brick_fence", Component.getBuilder().build()));
    public static ItemType NETHER_BRICK_SLAB = register(new ItemType("nether_brick_slab", Component.getBuilder().build()));
    public static ItemType NETHER_BRICK_STAIRS = register(new ItemType("nether_brick_stairs", Component.getBuilder().build()));
    public static ItemType NETHER_BRICK_WALL = register(new ItemType("nether_brick_wall", Component.getBuilder().build()));
    public static ItemType NETHER_BRICKS = register(new ItemType("nether_bricks", Component.getBuilder().build()));
    public static ItemType NETHER_GOLD_ORE = register(new ItemType("nether_gold_ore", Component.getBuilder().build()));
    public static ItemType NETHER_QUARTZ_ORE = register(new ItemType("nether_quartz_ore", Component.getBuilder().build()));
    public static ItemType NETHER_SPROUTS = register(new ItemType("nether_sprouts", Component.getBuilder().build()));
    public static ItemType NETHER_STAR = register(new ItemType("nether_star", Component.getBuilder().setRarity(Rarity.UNCOMMON).setEnchantmentGlintOverride(true).build()));
    public static ItemType NETHER_WART = register(new ItemType("nether_wart", Component.getBuilder().build()));
    public static ItemType NETHER_WART_BLOCK = register(new ItemType("nether_wart_block", Component.getBuilder().build()));
    public static ItemType NETHERITE_AXE = register(new ItemType("netherite_axe", Component.getBuilder().setMaxDamage(2031).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_netherite_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/axe"), true, 9.0d)).setDamagePerBlock(2)).build()));
    public static ItemType NETHERITE_BLOCK = register(new ItemType("netherite_block", Component.getBuilder().build()));
    public static ItemType NETHERITE_BOOTS = register(new ItemType("netherite_boots", Component.getBuilder().setMaxDamage(481).setMaxStackSize(1).build()));
    public static ItemType NETHERITE_CHESTPLATE = register(new ItemType("netherite_chestplate", Component.getBuilder().setMaxDamage(592).setMaxStackSize(1).build()));
    public static ItemType NETHERITE_HELMET = register(new ItemType("netherite_helmet", Component.getBuilder().setMaxDamage(407).setMaxStackSize(1).build()));
    public static ItemType NETHERITE_HOE = register(new ItemType("netherite_hoe", Component.getBuilder().setMaxDamage(2031).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_netherite_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/hoe"), true, 9.0d)).setDamagePerBlock(2)).build()));
    public static ItemType NETHERITE_INGOT = register(new ItemType("netherite_ingot", Component.getBuilder().build()));
    public static ItemType NETHERITE_LEGGINGS = register(new ItemType("netherite_leggings", Component.getBuilder().setMaxDamage(555).setMaxStackSize(1).build()));
    public static ItemType NETHERITE_PICKAXE = register(new ItemType("netherite_pickaxe", Component.getBuilder().setMaxDamage(2031).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_netherite_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/pickaxe"), true, 9.0d)).setDamagePerBlock(2)).build()));
    public static ItemType NETHERITE_SCRAP = register(new ItemType("netherite_scrap", Component.getBuilder().build()));
    public static ItemType NETHERITE_SHOVEL = register(new ItemType("netherite_shovel", Component.getBuilder().setMaxDamage(2031).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_netherite_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/shovel"), true, 9.0d)).setDamagePerBlock(2)).build()));
    public static ItemType NETHERITE_SWORD = register(new ItemType("netherite_sword", Component.getBuilder().setMaxDamage(2031).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("minecraft:cobweb"), true, 15.0d), new ToolRule(List.of("#minecraft:sword_efficient"), false, 1.5d)).setDamagePerBlock(2)).build()));
    public static ItemType NETHERITE_UPGRADE_SMITHING_TEMPLATE = register(new ItemType("netherite_upgrade_smithing_template", Component.getBuilder().build()));
    public static ItemType NETHERRACK = register(new ItemType("netherrack", Component.getBuilder().build()));
    public static ItemType NOTE_BLOCK = register(new ItemType("note_block", Component.getBuilder().build()));
    public static ItemType OAK_BOAT = register(new ItemType("oak_boat", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType OAK_BUTTON = register(new ItemType("oak_button", Component.getBuilder().build()));
    public static ItemType OAK_CHEST_BOAT = register(new ItemType("oak_chest_boat", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType OAK_DOOR = register(new ItemType("oak_door", Component.getBuilder().build()));
    public static ItemType OAK_FENCE = register(new ItemType("oak_fence", Component.getBuilder().build()));
    public static ItemType OAK_FENCE_GATE = register(new ItemType("oak_fence_gate", Component.getBuilder().build()));
    public static ItemType OAK_HANGING_SIGN = register(new ItemType("oak_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType OAK_LEAVES = register(new ItemType("oak_leaves", Component.getBuilder().build()));
    public static ItemType OAK_LOG = register(new ItemType("oak_log", Component.getBuilder().build()));
    public static ItemType OAK_PLANKS = register(new ItemType("oak_planks", Component.getBuilder().build()));
    public static ItemType OAK_PRESSURE_PLATE = register(new ItemType("oak_pressure_plate", Component.getBuilder().build()));
    public static ItemType OAK_SAPLING = register(new ItemType("oak_sapling", Component.getBuilder().build()));
    public static ItemType OAK_SIGN = register(new ItemType("oak_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType OAK_SLAB = register(new ItemType("oak_slab", Component.getBuilder().build()));
    public static ItemType OAK_STAIRS = register(new ItemType("oak_stairs", Component.getBuilder().build()));
    public static ItemType OAK_TRAPDOOR = register(new ItemType("oak_trapdoor", Component.getBuilder().build()));
    public static ItemType OAK_WOOD = register(new ItemType("oak_wood", Component.getBuilder().build()));
    public static ItemType OBSERVER = register(new ItemType("observer", Component.getBuilder().build()));
    public static ItemType OBSIDIAN = register(new ItemType("obsidian", Component.getBuilder().build()));
    public static ItemType OCELOT_SPAWN_EGG = register(new ItemType("ocelot_spawn_egg", Component.getBuilder().build()));
    public static ItemType OCHRE_FROGLIGHT = register(new ItemType("ochre_froglight", Component.getBuilder().build()));
    public static ItemType OMINOUS_BOTTLE = register(new ItemType("ominous_bottle", Component.getBuilder().setOminousBottleAmplifier(0).build()));
    public static ItemType OMINOUS_TRIAL_KEY = register(new ItemType("ominous_trial_key", Component.getBuilder().build()));
    public static ItemType ORANGE_BANNER = register(new ItemType("orange_banner", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType ORANGE_BED = register(new ItemType("orange_bed", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType ORANGE_CANDLE = register(new ItemType("orange_candle", Component.getBuilder().build()));
    public static ItemType ORANGE_CARPET = register(new ItemType("orange_carpet", Component.getBuilder().build()));
    public static ItemType ORANGE_CONCRETE = register(new ItemType("orange_concrete", Component.getBuilder().build()));
    public static ItemType ORANGE_CONCRETE_POWDER = register(new ItemType("orange_concrete_powder", Component.getBuilder().build()));
    public static ItemType ORANGE_DYE = register(new ItemType("orange_dye", Component.getBuilder().build()));
    public static ItemType ORANGE_GLAZED_TERRACOTTA = register(new ItemType("orange_glazed_terracotta", Component.getBuilder().build()));
    public static ItemType ORANGE_SHULKER_BOX = register(new ItemType("orange_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType ORANGE_STAINED_GLASS = register(new ItemType("orange_stained_glass", Component.getBuilder().build()));
    public static ItemType ORANGE_STAINED_GLASS_PANE = register(new ItemType("orange_stained_glass_pane", Component.getBuilder().build()));
    public static ItemType ORANGE_TERRACOTTA = register(new ItemType("orange_terracotta", Component.getBuilder().build()));
    public static ItemType ORANGE_TULIP = register(new ItemType("orange_tulip", Component.getBuilder().build()));
    public static ItemType ORANGE_WOOL = register(new ItemType("orange_wool", Component.getBuilder().build()));
    public static ItemType OXEYE_DAISY = register(new ItemType("oxeye_daisy", Component.getBuilder().build()));
    public static ItemType OXIDIZED_CHISELED_COPPER = register(new ItemType("oxidized_chiseled_copper", Component.getBuilder().build()));
    public static ItemType OXIDIZED_COPPER = register(new ItemType("oxidized_copper", Component.getBuilder().build()));
    public static ItemType OXIDIZED_COPPER_BULB = register(new ItemType("oxidized_copper_bulb", Component.getBuilder().build()));
    public static ItemType OXIDIZED_COPPER_DOOR = register(new ItemType("oxidized_copper_door", Component.getBuilder().build()));
    public static ItemType OXIDIZED_COPPER_GRATE = register(new ItemType("oxidized_copper_grate", Component.getBuilder().build()));
    public static ItemType OXIDIZED_COPPER_TRAPDOOR = register(new ItemType("oxidized_copper_trapdoor", Component.getBuilder().build()));
    public static ItemType OXIDIZED_CUT_COPPER = register(new ItemType("oxidized_cut_copper", Component.getBuilder().build()));
    public static ItemType OXIDIZED_CUT_COPPER_SLAB = register(new ItemType("oxidized_cut_copper_slab", Component.getBuilder().build()));
    public static ItemType OXIDIZED_CUT_COPPER_STAIRS = register(new ItemType("oxidized_cut_copper_stairs", Component.getBuilder().build()));
    public static ItemType PACKED_ICE = register(new ItemType("packed_ice", Component.getBuilder().build()));
    public static ItemType PACKED_MUD = register(new ItemType("packed_mud", Component.getBuilder().build()));
    public static ItemType PAINTING = register(new ItemType("painting", Component.getBuilder().build()));
    public static ItemType PANDA_SPAWN_EGG = register(new ItemType("panda_spawn_egg", Component.getBuilder().build()));
    public static ItemType PAPER = register(new ItemType("paper", Component.getBuilder().build()));
    public static ItemType PARROT_SPAWN_EGG = register(new ItemType("parrot_spawn_egg", Component.getBuilder().build()));
    public static ItemType PEARLESCENT_FROGLIGHT = register(new ItemType("pearlescent_froglight", Component.getBuilder().build()));
    public static ItemType PEONY = register(new ItemType("peony", Component.getBuilder().build()));
    public static ItemType PETRIFIED_OAK_SLAB = register(new ItemType("petrified_oak_slab", Component.getBuilder().build()));
    public static ItemType PHANTOM_MEMBRANE = register(new ItemType("phantom_membrane", Component.getBuilder().build()));
    public static ItemType PHANTOM_SPAWN_EGG = register(new ItemType("phantom_spawn_egg", Component.getBuilder().build()));
    public static ItemType PIG_SPAWN_EGG = register(new ItemType("pig_spawn_egg", Component.getBuilder().build()));
    public static ItemType PIGLIN_BANNER_PATTERN = register(new ItemType("piglin_banner_pattern", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.UNCOMMON).build()));
    public static ItemType PIGLIN_BRUTE_SPAWN_EGG = register(new ItemType("piglin_brute_spawn_egg", Component.getBuilder().build()));
    public static ItemType PIGLIN_HEAD = register(new ItemType("piglin_head", Component.getBuilder().setRarity(Rarity.UNCOMMON).build()));
    public static ItemType PIGLIN_SPAWN_EGG = register(new ItemType("piglin_spawn_egg", Component.getBuilder().build()));
    public static ItemType PILLAGER_SPAWN_EGG = register(new ItemType("pillager_spawn_egg", Component.getBuilder().build()));
    public static ItemType PINK_BANNER = register(new ItemType("pink_banner", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType PINK_BED = register(new ItemType("pink_bed", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType PINK_CANDLE = register(new ItemType("pink_candle", Component.getBuilder().build()));
    public static ItemType PINK_CARPET = register(new ItemType("pink_carpet", Component.getBuilder().build()));
    public static ItemType PINK_CONCRETE = register(new ItemType("pink_concrete", Component.getBuilder().build()));
    public static ItemType PINK_CONCRETE_POWDER = register(new ItemType("pink_concrete_powder", Component.getBuilder().build()));
    public static ItemType PINK_DYE = register(new ItemType("pink_dye", Component.getBuilder().build()));
    public static ItemType PINK_GLAZED_TERRACOTTA = register(new ItemType("pink_glazed_terracotta", Component.getBuilder().build()));
    public static ItemType PINK_PETALS = register(new ItemType("pink_petals", Component.getBuilder().build()));
    public static ItemType PINK_SHULKER_BOX = register(new ItemType("pink_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType PINK_STAINED_GLASS = register(new ItemType("pink_stained_glass", Component.getBuilder().build()));
    public static ItemType PINK_STAINED_GLASS_PANE = register(new ItemType("pink_stained_glass_pane", Component.getBuilder().build()));
    public static ItemType PINK_TERRACOTTA = register(new ItemType("pink_terracotta", Component.getBuilder().build()));
    public static ItemType PINK_TULIP = register(new ItemType("pink_tulip", Component.getBuilder().build()));
    public static ItemType PINK_WOOL = register(new ItemType("pink_wool", Component.getBuilder().build()));
    public static ItemType PISTON = register(new ItemType("piston", Component.getBuilder().build()));
    public static ItemType PITCHER_PLANT = register(new ItemType("pitcher_plant", Component.getBuilder().build()));
    public static ItemType PITCHER_POD = register(new ItemType("pitcher_pod", Component.getBuilder().build()));
    public static ItemType PLAYER_HEAD = register(new ItemType("player_head", Component.getBuilder().setRarity(Rarity.UNCOMMON).build()));
    public static ItemType PLENTY_POTTERY_SHERD = register(new ItemType("plenty_pottery_sherd", Component.getBuilder().build()));
    public static ItemType PODZOL = register(new ItemType("podzol", Component.getBuilder().build()));
    public static ItemType POINTED_DRIPSTONE = register(new ItemType("pointed_dripstone", Component.getBuilder().build()));
    public static ItemType POISONOUS_POTATO = register(new ItemType("poisonous_potato", Component.getBuilder().build()));
    public static ItemType POLAR_BEAR_SPAWN_EGG = register(new ItemType("polar_bear_spawn_egg", Component.getBuilder().build()));
    public static ItemType POLISHED_ANDESITE = register(new ItemType("polished_andesite", Component.getBuilder().build()));
    public static ItemType POLISHED_ANDESITE_SLAB = register(new ItemType("polished_andesite_slab", Component.getBuilder().build()));
    public static ItemType POLISHED_ANDESITE_STAIRS = register(new ItemType("polished_andesite_stairs", Component.getBuilder().build()));
    public static ItemType POLISHED_BASALT = register(new ItemType("polished_basalt", Component.getBuilder().build()));
    public static ItemType POLISHED_BLACKSTONE = register(new ItemType("polished_blackstone", Component.getBuilder().build()));
    public static ItemType POLISHED_BLACKSTONE_BRICK_SLAB = register(new ItemType("polished_blackstone_brick_slab", Component.getBuilder().build()));
    public static ItemType POLISHED_BLACKSTONE_BRICK_STAIRS = register(new ItemType("polished_blackstone_brick_stairs", Component.getBuilder().build()));
    public static ItemType POLISHED_BLACKSTONE_BRICK_WALL = register(new ItemType("polished_blackstone_brick_wall", Component.getBuilder().build()));
    public static ItemType POLISHED_BLACKSTONE_BRICKS = register(new ItemType("polished_blackstone_bricks", Component.getBuilder().build()));
    public static ItemType POLISHED_BLACKSTONE_BUTTON = register(new ItemType("polished_blackstone_button", Component.getBuilder().build()));
    public static ItemType POLISHED_BLACKSTONE_PRESSURE_PLATE = register(new ItemType("polished_blackstone_pressure_plate", Component.getBuilder().build()));
    public static ItemType POLISHED_BLACKSTONE_SLAB = register(new ItemType("polished_blackstone_slab", Component.getBuilder().build()));
    public static ItemType POLISHED_BLACKSTONE_STAIRS = register(new ItemType("polished_blackstone_stairs", Component.getBuilder().build()));
    public static ItemType POLISHED_BLACKSTONE_WALL = register(new ItemType("polished_blackstone_wall", Component.getBuilder().build()));
    public static ItemType POLISHED_DEEPSLATE = register(new ItemType("polished_deepslate", Component.getBuilder().build()));
    public static ItemType POLISHED_DEEPSLATE_SLAB = register(new ItemType("polished_deepslate_slab", Component.getBuilder().build()));
    public static ItemType POLISHED_DEEPSLATE_STAIRS = register(new ItemType("polished_deepslate_stairs", Component.getBuilder().build()));
    public static ItemType POLISHED_DEEPSLATE_WALL = register(new ItemType("polished_deepslate_wall", Component.getBuilder().build()));
    public static ItemType POLISHED_DIORITE = register(new ItemType("polished_diorite", Component.getBuilder().build()));
    public static ItemType POLISHED_DIORITE_SLAB = register(new ItemType("polished_diorite_slab", Component.getBuilder().build()));
    public static ItemType POLISHED_DIORITE_STAIRS = register(new ItemType("polished_diorite_stairs", Component.getBuilder().build()));
    public static ItemType POLISHED_GRANITE = register(new ItemType("polished_granite", Component.getBuilder().build()));
    public static ItemType POLISHED_GRANITE_SLAB = register(new ItemType("polished_granite_slab", Component.getBuilder().build()));
    public static ItemType POLISHED_GRANITE_STAIRS = register(new ItemType("polished_granite_stairs", Component.getBuilder().build()));
    public static ItemType POLISHED_TUFF = register(new ItemType("polished_tuff", Component.getBuilder().build()));
    public static ItemType POLISHED_TUFF_SLAB = register(new ItemType("polished_tuff_slab", Component.getBuilder().build()));
    public static ItemType POLISHED_TUFF_STAIRS = register(new ItemType("polished_tuff_stairs", Component.getBuilder().build()));
    public static ItemType POLISHED_TUFF_WALL = register(new ItemType("polished_tuff_wall", Component.getBuilder().build()));
    public static ItemType POPPED_CHORUS_FRUIT = register(new ItemType("popped_chorus_fruit", Component.getBuilder().build()));
    public static ItemType POPPY = register(new ItemType("poppy", Component.getBuilder().build()));
    public static ItemType PORKCHOP = register(new ItemType("porkchop", Component.getBuilder().build()));
    public static ItemType POTATO = register(new ItemType("potato", Component.getBuilder().build()));
    public static ItemType POTION = register(new ItemType("potion", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType POWDER_SNOW_BUCKET = register(new ItemType("powder_snow_bucket", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType POWERED_RAIL = register(new ItemType("powered_rail", Component.getBuilder().build()));
    public static ItemType PRISMARINE = register(new ItemType("prismarine", Component.getBuilder().build()));
    public static ItemType PRISMARINE_BRICK_SLAB = register(new ItemType("prismarine_brick_slab", Component.getBuilder().build()));
    public static ItemType PRISMARINE_BRICK_STAIRS = register(new ItemType("prismarine_brick_stairs", Component.getBuilder().build()));
    public static ItemType PRISMARINE_BRICKS = register(new ItemType("prismarine_bricks", Component.getBuilder().build()));
    public static ItemType PRISMARINE_CRYSTALS = register(new ItemType("prismarine_crystals", Component.getBuilder().build()));
    public static ItemType PRISMARINE_SHARD = register(new ItemType("prismarine_shard", Component.getBuilder().build()));
    public static ItemType PRISMARINE_SLAB = register(new ItemType("prismarine_slab", Component.getBuilder().build()));
    public static ItemType PRISMARINE_STAIRS = register(new ItemType("prismarine_stairs", Component.getBuilder().build()));
    public static ItemType PRISMARINE_WALL = register(new ItemType("prismarine_wall", Component.getBuilder().build()));
    public static ItemType PRIZE_POTTERY_SHERD = register(new ItemType("prize_pottery_sherd", Component.getBuilder().build()));
    public static ItemType PUFFERFISH = register(new ItemType("pufferfish", Component.getBuilder().build()));
    public static ItemType PUFFERFISH_BUCKET = register(new ItemType("pufferfish_bucket", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType PUFFERFISH_SPAWN_EGG = register(new ItemType("pufferfish_spawn_egg", Component.getBuilder().build()));
    public static ItemType PUMPKIN = register(new ItemType("pumpkin", Component.getBuilder().build()));
    public static ItemType PUMPKIN_PIE = register(new ItemType("pumpkin_pie", Component.getBuilder().build()));
    public static ItemType PUMPKIN_SEEDS = register(new ItemType("pumpkin_seeds", Component.getBuilder().build()));
    public static ItemType PURPLE_BANNER = register(new ItemType("purple_banner", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType PURPLE_BED = register(new ItemType("purple_bed", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType PURPLE_CANDLE = register(new ItemType("purple_candle", Component.getBuilder().build()));
    public static ItemType PURPLE_CARPET = register(new ItemType("purple_carpet", Component.getBuilder().build()));
    public static ItemType PURPLE_CONCRETE = register(new ItemType("purple_concrete", Component.getBuilder().build()));
    public static ItemType PURPLE_CONCRETE_POWDER = register(new ItemType("purple_concrete_powder", Component.getBuilder().build()));
    public static ItemType PURPLE_DYE = register(new ItemType("purple_dye", Component.getBuilder().build()));
    public static ItemType PURPLE_GLAZED_TERRACOTTA = register(new ItemType("purple_glazed_terracotta", Component.getBuilder().build()));
    public static ItemType PURPLE_SHULKER_BOX = register(new ItemType("purple_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType PURPLE_STAINED_GLASS = register(new ItemType("purple_stained_glass", Component.getBuilder().build()));
    public static ItemType PURPLE_STAINED_GLASS_PANE = register(new ItemType("purple_stained_glass_pane", Component.getBuilder().build()));
    public static ItemType PURPLE_TERRACOTTA = register(new ItemType("purple_terracotta", Component.getBuilder().build()));
    public static ItemType PURPLE_WOOL = register(new ItemType("purple_wool", Component.getBuilder().build()));
    public static ItemType PURPUR_BLOCK = register(new ItemType("purpur_block", Component.getBuilder().build()));
    public static ItemType PURPUR_PILLAR = register(new ItemType("purpur_pillar", Component.getBuilder().build()));
    public static ItemType PURPUR_SLAB = register(new ItemType("purpur_slab", Component.getBuilder().build()));
    public static ItemType PURPUR_STAIRS = register(new ItemType("purpur_stairs", Component.getBuilder().build()));
    public static ItemType QUARTZ = register(new ItemType("quartz", Component.getBuilder().build()));
    public static ItemType QUARTZ_BLOCK = register(new ItemType("quartz_block", Component.getBuilder().build()));
    public static ItemType QUARTZ_BRICKS = register(new ItemType("quartz_bricks", Component.getBuilder().build()));
    public static ItemType QUARTZ_PILLAR = register(new ItemType("quartz_pillar", Component.getBuilder().build()));
    public static ItemType QUARTZ_SLAB = register(new ItemType("quartz_slab", Component.getBuilder().build()));
    public static ItemType QUARTZ_STAIRS = register(new ItemType("quartz_stairs", Component.getBuilder().build()));
    public static ItemType RABBIT = register(new ItemType("rabbit", Component.getBuilder().build()));
    public static ItemType RABBIT_FOOT = register(new ItemType("rabbit_foot", Component.getBuilder().build()));
    public static ItemType RABBIT_HIDE = register(new ItemType("rabbit_hide", Component.getBuilder().build()));
    public static ItemType RABBIT_SPAWN_EGG = register(new ItemType("rabbit_spawn_egg", Component.getBuilder().build()));
    public static ItemType RABBIT_STEW = register(new ItemType("rabbit_stew", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType RAIL = register(new ItemType("rail", Component.getBuilder().build()));
    public static ItemType RAISER_ARMOR_TRIM_SMITHING_TEMPLATE = register(new ItemType("raiser_armor_trim_smithing_template", Component.getBuilder().build()));
    public static ItemType RAVAGER_SPAWN_EGG = register(new ItemType("ravager_spawn_egg", Component.getBuilder().build()));
    public static ItemType RAW_COPPER = register(new ItemType("raw_copper", Component.getBuilder().build()));
    public static ItemType RAW_COPPER_BLOCK = register(new ItemType("raw_copper_block", Component.getBuilder().build()));
    public static ItemType RAW_GOLD = register(new ItemType("raw_gold", Component.getBuilder().build()));
    public static ItemType RAW_GOLD_BLOCK = register(new ItemType("raw_gold_block", Component.getBuilder().build()));
    public static ItemType RAW_IRON = register(new ItemType("raw_iron", Component.getBuilder().build()));
    public static ItemType RAW_IRON_BLOCK = register(new ItemType("raw_iron_block", Component.getBuilder().build()));
    public static ItemType RECOVERY_COMPASS = register(new ItemType("recovery_compass", Component.getBuilder().build()));
    public static ItemType RED_BANNER = register(new ItemType("red_banner", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType RED_BED = register(new ItemType("red_bed", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType RED_CANDLE = register(new ItemType("red_candle", Component.getBuilder().build()));
    public static ItemType RED_CARPET = register(new ItemType("red_carpet", Component.getBuilder().build()));
    public static ItemType RED_CONCRETE = register(new ItemType("red_concrete", Component.getBuilder().build()));
    public static ItemType RED_CONCRETE_POWDER = register(new ItemType("red_concrete_powder", Component.getBuilder().build()));
    public static ItemType RED_DYE = register(new ItemType("red_dye", Component.getBuilder().build()));
    public static ItemType RED_GLAZED_TERRACOTTA = register(new ItemType("red_glazed_terracotta", Component.getBuilder().build()));
    public static ItemType RED_MUSHROOM = register(new ItemType("red_mushroom", Component.getBuilder().build()));
    public static ItemType RED_MUSHROOM_BLOCK = register(new ItemType("red_mushroom_block", Component.getBuilder().build()));
    public static ItemType RED_NETHER_BRICK_SLAB = register(new ItemType("red_nether_brick_slab", Component.getBuilder().build()));
    public static ItemType RED_NETHER_BRICK_STAIRS = register(new ItemType("red_nether_brick_stairs", Component.getBuilder().build()));
    public static ItemType RED_NETHER_BRICK_WALL = register(new ItemType("red_nether_brick_wall", Component.getBuilder().build()));
    public static ItemType RED_NETHER_BRICKS = register(new ItemType("red_nether_bricks", Component.getBuilder().build()));
    public static ItemType RED_SAND = register(new ItemType("red_sand", Component.getBuilder().build()));
    public static ItemType RED_SANDSTONE = register(new ItemType("red_sandstone", Component.getBuilder().build()));
    public static ItemType RED_SANDSTONE_SLAB = register(new ItemType("red_sandstone_slab", Component.getBuilder().build()));
    public static ItemType RED_SANDSTONE_STAIRS = register(new ItemType("red_sandstone_stairs", Component.getBuilder().build()));
    public static ItemType RED_SANDSTONE_WALL = register(new ItemType("red_sandstone_wall", Component.getBuilder().build()));
    public static ItemType RED_SHULKER_BOX = register(new ItemType("red_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType RED_STAINED_GLASS = register(new ItemType("red_stained_glass", Component.getBuilder().build()));
    public static ItemType RED_STAINED_GLASS_PANE = register(new ItemType("red_stained_glass_pane", Component.getBuilder().build()));
    public static ItemType RED_TERRACOTTA = register(new ItemType("red_terracotta", Component.getBuilder().build()));
    public static ItemType RED_TULIP = register(new ItemType("red_tulip", Component.getBuilder().build()));
    public static ItemType RED_WOOL = register(new ItemType("red_wool", Component.getBuilder().build()));
    public static ItemType REDSTONE = register(new ItemType("redstone", Component.getBuilder().build()));
    public static ItemType REDSTONE_BLOCK = register(new ItemType("redstone_block", Component.getBuilder().build()));
    public static ItemType REDSTONE_LAMP = register(new ItemType("redstone_lamp", Component.getBuilder().build()));
    public static ItemType REDSTONE_ORE = register(new ItemType("redstone_ore", Component.getBuilder().build()));
    public static ItemType REDSTONE_TORCH = register(new ItemType("redstone_torch", Component.getBuilder().build()));
    public static ItemType REINFORCED_DEEPSLATE = register(new ItemType("reinforced_deepslate", Component.getBuilder().build()));
    public static ItemType REPEATER = register(new ItemType("repeater", Component.getBuilder().build()));
    public static ItemType REPEATING_COMMAND_BLOCK = register(new ItemType("repeating_command_block", Component.getBuilder().setRarity(Rarity.EPIC).build()));
    public static ItemType RESPAWN_ANCHOR = register(new ItemType("respawn_anchor", Component.getBuilder().build()));
    public static ItemType RIB_ARMOR_TRIM_SMITHING_TEMPLATE = register(new ItemType("rib_armor_trim_smithing_template", Component.getBuilder().build()));
    public static ItemType ROOTED_DIRT = register(new ItemType("rooted_dirt", Component.getBuilder().build()));
    public static ItemType ROSE_BUSH = register(new ItemType("rose_bush", Component.getBuilder().build()));
    public static ItemType ROTTEN_FLESH = register(new ItemType("rotten_flesh", Component.getBuilder().build()));
    public static ItemType SADDLE = register(new ItemType("saddle", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType SALMON = register(new ItemType("salmon", Component.getBuilder().build()));
    public static ItemType SALMON_BUCKET = register(new ItemType("salmon_bucket", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType SALMON_SPAWN_EGG = register(new ItemType("salmon_spawn_egg", Component.getBuilder().build()));
    public static ItemType SAND = register(new ItemType("sand", Component.getBuilder().build()));
    public static ItemType SANDSTONE = register(new ItemType("sandstone", Component.getBuilder().build()));
    public static ItemType SANDSTONE_SLAB = register(new ItemType("sandstone_slab", Component.getBuilder().build()));
    public static ItemType SANDSTONE_STAIRS = register(new ItemType("sandstone_stairs", Component.getBuilder().build()));
    public static ItemType SANDSTONE_WALL = register(new ItemType("sandstone_wall", Component.getBuilder().build()));
    public static ItemType SCAFFOLDING = register(new ItemType("scaffolding", Component.getBuilder().build()));
    public static ItemType SCRAPE_POTTERY_SHERD = register(new ItemType("scrape_pottery_sherd", Component.getBuilder().build()));
    public static ItemType SCULK = register(new ItemType("sculk", Component.getBuilder().build()));
    public static ItemType SCULK_CATALYST = register(new ItemType("sculk_catalyst", Component.getBuilder().build()));
    public static ItemType SCULK_SENSOR = register(new ItemType("sculk_sensor", Component.getBuilder().build()));
    public static ItemType SCULK_SHRIEKER = register(new ItemType("sculk_shrieker", Component.getBuilder().build()));
    public static ItemType SCULK_VEIN = register(new ItemType("sculk_vein", Component.getBuilder().build()));
    public static ItemType SEA_LANTERN = register(new ItemType("sea_lantern", Component.getBuilder().build()));
    public static ItemType SEA_PICKLE = register(new ItemType("sea_pickle", Component.getBuilder().build()));
    public static ItemType SEAGRASS = register(new ItemType("seagrass", Component.getBuilder().build()));
    public static ItemType SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE = register(new ItemType("sentry_armor_trim_smithing_template", Component.getBuilder().build()));
    public static ItemType SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE = register(new ItemType("shaper_armor_trim_smithing_template", Component.getBuilder().build()));
    public static ItemType SHEAF_POTTERY_SHERD = register(new ItemType("sheaf_pottery_sherd", Component.getBuilder().build()));
    public static ItemType SHEARS = register(new ItemType("shears", Component.getBuilder().setMaxDamage(238).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("minecraft:cobweb"), true, 15.0d), new ToolRule(List.of("#minecraft:leaves"), false, 15.0d), new ToolRule(List.of("#minecraft:wool"), false, 5.0d), new ToolRule(List.of("minecraft:vine", "minecraft:glow_lichen"), false, 2.0d)).setDamagePerBlock(2)).build()));
    public static ItemType SHEEP_SPAWN_EGG = register(new ItemType("sheep_spawn_egg", Component.getBuilder().build()));
    public static ItemType SHELTER_POTTERY_SHERD = register(new ItemType("shelter_pottery_sherd", Component.getBuilder().build()));
    public static ItemType SHIELD = register(new ItemType("shield", Component.getBuilder().setMaxDamage(336).setMaxStackSize(1).build()));
    public static ItemType SHORT_GRASS = register(new ItemType("short_grass", Component.getBuilder().build()));
    public static ItemType SHROOMLIGHT = register(new ItemType("shroomlight", Component.getBuilder().build()));
    public static ItemType SHULKER_BOX = register(new ItemType("shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType SHULKER_SHELL = register(new ItemType("shulker_shell", Component.getBuilder().build()));
    public static ItemType SHULKER_SPAWN_EGG = register(new ItemType("shulker_spawn_egg", Component.getBuilder().build()));
    public static ItemType SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE = register(new ItemType("silence_armor_trim_smithing_template", Component.getBuilder().build()));
    public static ItemType SILVERFISH_SPAWN_EGG = register(new ItemType("silverfish_spawn_egg", Component.getBuilder().build()));
    public static ItemType SKELETON_HORSE_SPAWN_EGG = register(new ItemType("skeleton_horse_spawn_egg", Component.getBuilder().build()));
    public static ItemType SKELETON_SKULL = register(new ItemType("skeleton_skull", Component.getBuilder().setRarity(Rarity.UNCOMMON).build()));
    public static ItemType SKELETON_SPAWN_EGG = register(new ItemType("skeleton_spawn_egg", Component.getBuilder().build()));
    public static ItemType SKULL_BANNER_PATTERN = register(new ItemType("skull_banner_pattern", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.UNCOMMON).build()));
    public static ItemType SKULL_POTTERY_SHERD = register(new ItemType("skull_pottery_sherd", Component.getBuilder().build()));
    public static ItemType SLIME_BALL = register(new ItemType("slime_ball", Component.getBuilder().build()));
    public static ItemType SLIME_BLOCK = register(new ItemType("slime_block", Component.getBuilder().build()));
    public static ItemType SLIME_SPAWN_EGG = register(new ItemType("slime_spawn_egg", Component.getBuilder().build()));
    public static ItemType SMALL_AMETHYST_BUD = register(new ItemType("small_amethyst_bud", Component.getBuilder().build()));
    public static ItemType SMALL_DRIPLEAF = register(new ItemType("small_dripleaf", Component.getBuilder().build()));
    public static ItemType SMITHING_TABLE = register(new ItemType("smithing_table", Component.getBuilder().build()));
    public static ItemType SMOKER = register(new ItemType("smoker", Component.getBuilder().build()));
    public static ItemType SMOOTH_BASALT = register(new ItemType("smooth_basalt", Component.getBuilder().build()));
    public static ItemType SMOOTH_QUARTZ = register(new ItemType("smooth_quartz", Component.getBuilder().build()));
    public static ItemType SMOOTH_QUARTZ_SLAB = register(new ItemType("smooth_quartz_slab", Component.getBuilder().build()));
    public static ItemType SMOOTH_QUARTZ_STAIRS = register(new ItemType("smooth_quartz_stairs", Component.getBuilder().build()));
    public static ItemType SMOOTH_RED_SANDSTONE = register(new ItemType("smooth_red_sandstone", Component.getBuilder().build()));
    public static ItemType SMOOTH_RED_SANDSTONE_SLAB = register(new ItemType("smooth_red_sandstone_slab", Component.getBuilder().build()));
    public static ItemType SMOOTH_RED_SANDSTONE_STAIRS = register(new ItemType("smooth_red_sandstone_stairs", Component.getBuilder().build()));
    public static ItemType SMOOTH_SANDSTONE = register(new ItemType("smooth_sandstone", Component.getBuilder().build()));
    public static ItemType SMOOTH_SANDSTONE_SLAB = register(new ItemType("smooth_sandstone_slab", Component.getBuilder().build()));
    public static ItemType SMOOTH_SANDSTONE_STAIRS = register(new ItemType("smooth_sandstone_stairs", Component.getBuilder().build()));
    public static ItemType SMOOTH_STONE = register(new ItemType("smooth_stone", Component.getBuilder().build()));
    public static ItemType SMOOTH_STONE_SLAB = register(new ItemType("smooth_stone_slab", Component.getBuilder().build()));
    public static ItemType SNIFFER_EGG = register(new ItemType("sniffer_egg", Component.getBuilder().build()));
    public static ItemType SNIFFER_SPAWN_EGG = register(new ItemType("sniffer_spawn_egg", Component.getBuilder().build()));
    public static ItemType SNORT_POTTERY_SHERD = register(new ItemType("snort_pottery_sherd", Component.getBuilder().build()));
    public static ItemType SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE = register(new ItemType("snout_armor_trim_smithing_template", Component.getBuilder().build()));
    public static ItemType SNOW = register(new ItemType("snow", Component.getBuilder().build()));
    public static ItemType SNOW_BLOCK = register(new ItemType("snow_block", Component.getBuilder().build()));
    public static ItemType SNOW_GOLEM_SPAWN_EGG = register(new ItemType("snow_golem_spawn_egg", Component.getBuilder().build()));
    public static ItemType SNOWBALL = register(new ItemType("snowball", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType SOUL_CAMPFIRE = register(new ItemType("soul_campfire", Component.getBuilder().build()));
    public static ItemType SOUL_LANTERN = register(new ItemType("soul_lantern", Component.getBuilder().build()));
    public static ItemType SOUL_SAND = register(new ItemType("soul_sand", Component.getBuilder().build()));
    public static ItemType SOUL_SOIL = register(new ItemType("soul_soil", Component.getBuilder().build()));
    public static ItemType SOUL_TORCH = register(new ItemType("soul_torch", Component.getBuilder().build()));
    public static ItemType SPAWNER = register(new ItemType("spawner", Component.getBuilder().build()));
    public static ItemType SPECTRAL_ARROW = register(new ItemType("spectral_arrow", Component.getBuilder().build()));
    public static ItemType SPIDER_EYE = register(new ItemType("spider_eye", Component.getBuilder().build()));
    public static ItemType SPIDER_SPAWN_EGG = register(new ItemType("spider_spawn_egg", Component.getBuilder().build()));
    public static ItemType SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE = register(new ItemType("spire_armor_trim_smithing_template", Component.getBuilder().build()));
    public static ItemType SPLASH_POTION = register(new ItemType("splash_potion", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType SPONGE = register(new ItemType("sponge", Component.getBuilder().build()));
    public static ItemType SPORE_BLOSSOM = register(new ItemType("spore_blossom", Component.getBuilder().build()));
    public static ItemType SPRUCE_BOAT = register(new ItemType("spruce_boat", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType SPRUCE_BUTTON = register(new ItemType("spruce_button", Component.getBuilder().build()));
    public static ItemType SPRUCE_CHEST_BOAT = register(new ItemType("spruce_chest_boat", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType SPRUCE_DOOR = register(new ItemType("spruce_door", Component.getBuilder().build()));
    public static ItemType SPRUCE_FENCE = register(new ItemType("spruce_fence", Component.getBuilder().build()));
    public static ItemType SPRUCE_FENCE_GATE = register(new ItemType("spruce_fence_gate", Component.getBuilder().build()));
    public static ItemType SPRUCE_HANGING_SIGN = register(new ItemType("spruce_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType SPRUCE_LEAVES = register(new ItemType("spruce_leaves", Component.getBuilder().build()));
    public static ItemType SPRUCE_LOG = register(new ItemType("spruce_log", Component.getBuilder().build()));
    public static ItemType SPRUCE_PLANKS = register(new ItemType("spruce_planks", Component.getBuilder().build()));
    public static ItemType SPRUCE_PRESSURE_PLATE = register(new ItemType("spruce_pressure_plate", Component.getBuilder().build()));
    public static ItemType SPRUCE_SAPLING = register(new ItemType("spruce_sapling", Component.getBuilder().build()));
    public static ItemType SPRUCE_SIGN = register(new ItemType("spruce_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType SPRUCE_SLAB = register(new ItemType("spruce_slab", Component.getBuilder().build()));
    public static ItemType SPRUCE_STAIRS = register(new ItemType("spruce_stairs", Component.getBuilder().build()));
    public static ItemType SPRUCE_TRAPDOOR = register(new ItemType("spruce_trapdoor", Component.getBuilder().build()));
    public static ItemType SPRUCE_WOOD = register(new ItemType("spruce_wood", Component.getBuilder().build()));
    public static ItemType SPYGLASS = register(new ItemType("spyglass", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType SQUID_SPAWN_EGG = register(new ItemType("squid_spawn_egg", Component.getBuilder().build()));
    public static ItemType STICK = register(new ItemType("stick", Component.getBuilder().build()));
    public static ItemType STICKY_PISTON = register(new ItemType("sticky_piston", Component.getBuilder().build()));
    public static ItemType STONE = register(new ItemType("stone", Component.getBuilder().build()));
    public static ItemType STONE_AXE = register(new ItemType("stone_axe", Component.getBuilder().setMaxDamage(131).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_stone_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/axe"), true, 4.0d)).setDamagePerBlock(2)).build()));
    public static ItemType STONE_BRICK_SLAB = register(new ItemType("stone_brick_slab", Component.getBuilder().build()));
    public static ItemType STONE_BRICK_STAIRS = register(new ItemType("stone_brick_stairs", Component.getBuilder().build()));
    public static ItemType STONE_BRICK_WALL = register(new ItemType("stone_brick_wall", Component.getBuilder().build()));
    public static ItemType STONE_BRICKS = register(new ItemType("stone_bricks", Component.getBuilder().build()));
    public static ItemType STONE_BUTTON = register(new ItemType("stone_button", Component.getBuilder().build()));
    public static ItemType STONE_HOE = register(new ItemType("stone_hoe", Component.getBuilder().setMaxDamage(131).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_stone_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/hoe"), true, 4.0d)).setDamagePerBlock(2)).build()));
    public static ItemType STONE_PICKAXE = register(new ItemType("stone_pickaxe", Component.getBuilder().setMaxDamage(131).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_stone_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/pickaxe"), true, 4.0d)).setDamagePerBlock(2)).build()));
    public static ItemType STONE_PRESSURE_PLATE = register(new ItemType("stone_pressure_plate", Component.getBuilder().build()));
    public static ItemType STONE_SHOVEL = register(new ItemType("stone_shovel", Component.getBuilder().setMaxDamage(131).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_stone_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/shovel"), true, 4.0d)).setDamagePerBlock(2)).build()));
    public static ItemType STONE_SLAB = register(new ItemType("stone_slab", Component.getBuilder().build()));
    public static ItemType STONE_STAIRS = register(new ItemType("stone_stairs", Component.getBuilder().build()));
    public static ItemType STONE_SWORD = register(new ItemType("stone_sword", Component.getBuilder().setMaxDamage(131).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("minecraft:cobweb"), true, 15.0d), new ToolRule(List.of("#minecraft:sword_efficient"), false, 1.5d)).setDamagePerBlock(2)).build()));
    public static ItemType STONECUTTER = register(new ItemType("stonecutter", Component.getBuilder().build()));
    public static ItemType STRAY_SPAWN_EGG = register(new ItemType("stray_spawn_egg", Component.getBuilder().build()));
    public static ItemType STRIDER_SPAWN_EGG = register(new ItemType("strider_spawn_egg", Component.getBuilder().build()));
    public static ItemType STRING = register(new ItemType("string", Component.getBuilder().build()));
    public static ItemType STRIPPED_ACACIA_LOG = register(new ItemType("stripped_acacia_log", Component.getBuilder().build()));
    public static ItemType STRIPPED_ACACIA_WOOD = register(new ItemType("stripped_acacia_wood", Component.getBuilder().build()));
    public static ItemType STRIPPED_BAMBOO_BLOCK = register(new ItemType("stripped_bamboo_block", Component.getBuilder().build()));
    public static ItemType STRIPPED_BIRCH_LOG = register(new ItemType("stripped_birch_log", Component.getBuilder().build()));
    public static ItemType STRIPPED_BIRCH_WOOD = register(new ItemType("stripped_birch_wood", Component.getBuilder().build()));
    public static ItemType STRIPPED_CHERRY_LOG = register(new ItemType("stripped_cherry_log", Component.getBuilder().build()));
    public static ItemType STRIPPED_CHERRY_WOOD = register(new ItemType("stripped_cherry_wood", Component.getBuilder().build()));
    public static ItemType STRIPPED_CRIMSON_HYPHAE = register(new ItemType("stripped_crimson_hyphae", Component.getBuilder().build()));
    public static ItemType STRIPPED_CRIMSON_STEM = register(new ItemType("stripped_crimson_stem", Component.getBuilder().build()));
    public static ItemType STRIPPED_DARK_OAK_LOG = register(new ItemType("stripped_dark_oak_log", Component.getBuilder().build()));
    public static ItemType STRIPPED_DARK_OAK_WOOD = register(new ItemType("stripped_dark_oak_wood", Component.getBuilder().build()));
    public static ItemType STRIPPED_JUNGLE_LOG = register(new ItemType("stripped_jungle_log", Component.getBuilder().build()));
    public static ItemType STRIPPED_JUNGLE_WOOD = register(new ItemType("stripped_jungle_wood", Component.getBuilder().build()));
    public static ItemType STRIPPED_MANGROVE_LOG = register(new ItemType("stripped_mangrove_log", Component.getBuilder().build()));
    public static ItemType STRIPPED_MANGROVE_WOOD = register(new ItemType("stripped_mangrove_wood", Component.getBuilder().build()));
    public static ItemType STRIPPED_OAK_LOG = register(new ItemType("stripped_oak_log", Component.getBuilder().build()));
    public static ItemType STRIPPED_OAK_WOOD = register(new ItemType("stripped_oak_wood", Component.getBuilder().build()));
    public static ItemType STRIPPED_SPRUCE_LOG = register(new ItemType("stripped_spruce_log", Component.getBuilder().build()));
    public static ItemType STRIPPED_SPRUCE_WOOD = register(new ItemType("stripped_spruce_wood", Component.getBuilder().build()));
    public static ItemType STRIPPED_WARPED_HYPHAE = register(new ItemType("stripped_warped_hyphae", Component.getBuilder().build()));
    public static ItemType STRIPPED_WARPED_STEM = register(new ItemType("stripped_warped_stem", Component.getBuilder().build()));
    public static ItemType STRUCTURE_BLOCK = register(new ItemType("structure_block", Component.getBuilder().setRarity(Rarity.EPIC).build()));
    public static ItemType STRUCTURE_VOID = register(new ItemType("structure_void", Component.getBuilder().setRarity(Rarity.EPIC).build()));
    public static ItemType SUGAR = register(new ItemType("sugar", Component.getBuilder().build()));
    public static ItemType SUGAR_CANE = register(new ItemType("sugar_cane", Component.getBuilder().build()));
    public static ItemType SUNFLOWER = register(new ItemType("sunflower", Component.getBuilder().build()));
    public static ItemType SUSPICIOUS_GRAVEL = register(new ItemType("suspicious_gravel", Component.getBuilder().build()));
    public static ItemType SUSPICIOUS_SAND = register(new ItemType("suspicious_sand", Component.getBuilder().build()));
    public static ItemType SUSPICIOUS_STEW = register(new ItemType("suspicious_stew", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType SWEET_BERRIES = register(new ItemType("sweet_berries", Component.getBuilder().build()));
    public static ItemType TADPOLE_BUCKET = register(new ItemType("tadpole_bucket", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType TADPOLE_SPAWN_EGG = register(new ItemType("tadpole_spawn_egg", Component.getBuilder().build()));
    public static ItemType TALL_GRASS = register(new ItemType("tall_grass", Component.getBuilder().build()));
    public static ItemType TARGET = register(new ItemType("target", Component.getBuilder().build()));
    public static ItemType TERRACOTTA = register(new ItemType("terracotta", Component.getBuilder().build()));
    public static ItemType TIDE_ARMOR_TRIM_SMITHING_TEMPLATE = register(new ItemType("tide_armor_trim_smithing_template", Component.getBuilder().build()));
    public static ItemType TINTED_GLASS = register(new ItemType("tinted_glass", Component.getBuilder().build()));
    public static ItemType TIPPED_ARROW = register(new ItemType("tipped_arrow", Component.getBuilder().build()));
    public static ItemType TNT = register(new ItemType("tnt", Component.getBuilder().build()));
    public static ItemType TNT_MINECART = register(new ItemType("tnt_minecart", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType TORCH = register(new ItemType("torch", Component.getBuilder().build()));
    public static ItemType TORCHFLOWER = register(new ItemType("torchflower", Component.getBuilder().build()));
    public static ItemType TORCHFLOWER_SEEDS = register(new ItemType("torchflower_seeds", Component.getBuilder().build()));
    public static ItemType TOTEM_OF_UNDYING = register(new ItemType("totem_of_undying", Component.getBuilder().setMaxStackSize(1).setRarity(Rarity.UNCOMMON).build()));
    public static ItemType TRADER_LLAMA_SPAWN_EGG = register(new ItemType("trader_llama_spawn_egg", Component.getBuilder().build()));
    public static ItemType TRAPPED_CHEST = register(new ItemType("trapped_chest", Component.getBuilder().build()));
    public static ItemType TRIAL_KEY = register(new ItemType("trial_key", Component.getBuilder().build()));
    public static ItemType TRIAL_SPAWNER = register(new ItemType("trial_spawner", Component.getBuilder().build()));
    public static ItemType TRIDENT = register(new ItemType("trident", Component.getBuilder().setMaxDamage(250).setMaxStackSize(1).setRarity(Rarity.EPIC).build()));
    public static ItemType TRIPWIRE_HOOK = register(new ItemType("tripwire_hook", Component.getBuilder().build()));
    public static ItemType TROPICAL_FISH = register(new ItemType("tropical_fish", Component.getBuilder().build()));
    public static ItemType TROPICAL_FISH_BUCKET = register(new ItemType("tropical_fish_bucket", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType TROPICAL_FISH_SPAWN_EGG = register(new ItemType("tropical_fish_spawn_egg", Component.getBuilder().build()));
    public static ItemType TUBE_CORAL = register(new ItemType("tube_coral", Component.getBuilder().build()));
    public static ItemType TUBE_CORAL_BLOCK = register(new ItemType("tube_coral_block", Component.getBuilder().build()));
    public static ItemType TUBE_CORAL_FAN = register(new ItemType("tube_coral_fan", Component.getBuilder().build()));
    public static ItemType TUFF = register(new ItemType("tuff", Component.getBuilder().build()));
    public static ItemType TUFF_BRICK_SLAB = register(new ItemType("tuff_brick_slab", Component.getBuilder().build()));
    public static ItemType TUFF_BRICK_STAIRS = register(new ItemType("tuff_brick_stairs", Component.getBuilder().build()));
    public static ItemType TUFF_BRICK_WALL = register(new ItemType("tuff_brick_wall", Component.getBuilder().build()));
    public static ItemType TUFF_BRICKS = register(new ItemType("tuff_bricks", Component.getBuilder().build()));
    public static ItemType TUFF_SLAB = register(new ItemType("tuff_slab", Component.getBuilder().build()));
    public static ItemType TUFF_STAIRS = register(new ItemType("tuff_stairs", Component.getBuilder().build()));
    public static ItemType TUFF_WALL = register(new ItemType("tuff_wall", Component.getBuilder().build()));
    public static ItemType TURTLE_EGG = register(new ItemType("turtle_egg", Component.getBuilder().build()));
    public static ItemType TURTLE_HELMET = register(new ItemType("turtle_helmet", Component.getBuilder().setMaxDamage(275).setMaxStackSize(1).build()));
    public static ItemType TURTLE_SCUTE = register(new ItemType("turtle_scute", Component.getBuilder().build()));
    public static ItemType TURTLE_SPAWN_EGG = register(new ItemType("turtle_spawn_egg", Component.getBuilder().build()));
    public static ItemType TWISTING_VINES = register(new ItemType("twisting_vines", Component.getBuilder().build()));
    public static ItemType VAULT = register(new ItemType("vault", Component.getBuilder().build()));
    public static ItemType VERDANT_FROGLIGHT = register(new ItemType("verdant_froglight", Component.getBuilder().build()));
    public static ItemType VEX_ARMOR_TRIM_SMITHING_TEMPLATE = register(new ItemType("vex_armor_trim_smithing_template", Component.getBuilder().build()));
    public static ItemType VEX_SPAWN_EGG = register(new ItemType("vex_spawn_egg", Component.getBuilder().build()));
    public static ItemType VILLAGER_SPAWN_EGG = register(new ItemType("villager_spawn_egg", Component.getBuilder().build()));
    public static ItemType VINDICATOR_SPAWN_EGG = register(new ItemType("vindicator_spawn_egg", Component.getBuilder().build()));
    public static ItemType VINE = register(new ItemType("vine", Component.getBuilder().build()));
    public static ItemType WANDERING_TRADER_SPAWN_EGG = register(new ItemType("wandering_trader_spawn_egg", Component.getBuilder().build()));
    public static ItemType WARD_ARMOR_TRIM_SMITHING_TEMPLATE = register(new ItemType("ward_armor_trim_smithing_template", Component.getBuilder().build()));
    public static ItemType WARDEN_SPAWN_EGG = register(new ItemType("warden_spawn_egg", Component.getBuilder().build()));
    public static ItemType WARPED_BUTTON = register(new ItemType("warped_button", Component.getBuilder().build()));
    public static ItemType WARPED_DOOR = register(new ItemType("warped_door", Component.getBuilder().build()));
    public static ItemType WARPED_FENCE = register(new ItemType("warped_fence", Component.getBuilder().build()));
    public static ItemType WARPED_FENCE_GATE = register(new ItemType("warped_fence_gate", Component.getBuilder().build()));
    public static ItemType WARPED_FUNGUS = register(new ItemType("warped_fungus", Component.getBuilder().build()));
    public static ItemType WARPED_FUNGUS_ON_A_STICK = register(new ItemType("warped_fungus_on_a_stick", Component.getBuilder().setMaxDamage(100).setMaxStackSize(1).build()));
    public static ItemType WARPED_HANGING_SIGN = register(new ItemType("warped_hanging_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType WARPED_HYPHAE = register(new ItemType("warped_hyphae", Component.getBuilder().build()));
    public static ItemType WARPED_NYLIUM = register(new ItemType("warped_nylium", Component.getBuilder().build()));
    public static ItemType WARPED_PLANKS = register(new ItemType("warped_planks", Component.getBuilder().build()));
    public static ItemType WARPED_PRESSURE_PLATE = register(new ItemType("warped_pressure_plate", Component.getBuilder().build()));
    public static ItemType WARPED_ROOTS = register(new ItemType("warped_roots", Component.getBuilder().build()));
    public static ItemType WARPED_SIGN = register(new ItemType("warped_sign", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType WARPED_SLAB = register(new ItemType("warped_slab", Component.getBuilder().build()));
    public static ItemType WARPED_STAIRS = register(new ItemType("warped_stairs", Component.getBuilder().build()));
    public static ItemType WARPED_STEM = register(new ItemType("warped_stem", Component.getBuilder().build()));
    public static ItemType WARPED_TRAPDOOR = register(new ItemType("warped_trapdoor", Component.getBuilder().build()));
    public static ItemType WARPED_WART_BLOCK = register(new ItemType("warped_wart_block", Component.getBuilder().build()));
    public static ItemType WATER_BUCKET = register(new ItemType("water_bucket", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType WAXED_CHISELED_COPPER = register(new ItemType("waxed_chiseled_copper", Component.getBuilder().build()));
    public static ItemType WAXED_COPPER_BLOCK = register(new ItemType("waxed_copper_block", Component.getBuilder().build()));
    public static ItemType WAXED_COPPER_BULB = register(new ItemType("waxed_copper_bulb", Component.getBuilder().build()));
    public static ItemType WAXED_COPPER_DOOR = register(new ItemType("waxed_copper_door", Component.getBuilder().build()));
    public static ItemType WAXED_COPPER_GRATE = register(new ItemType("waxed_copper_grate", Component.getBuilder().build()));
    public static ItemType WAXED_COPPER_TRAPDOOR = register(new ItemType("waxed_copper_trapdoor", Component.getBuilder().build()));
    public static ItemType WAXED_CUT_COPPER = register(new ItemType("waxed_cut_copper", Component.getBuilder().build()));
    public static ItemType WAXED_CUT_COPPER_SLAB = register(new ItemType("waxed_cut_copper_slab", Component.getBuilder().build()));
    public static ItemType WAXED_CUT_COPPER_STAIRS = register(new ItemType("waxed_cut_copper_stairs", Component.getBuilder().build()));
    public static ItemType WAXED_EXPOSED_CHISELED_COPPER = register(new ItemType("waxed_exposed_chiseled_copper", Component.getBuilder().build()));
    public static ItemType WAXED_EXPOSED_COPPER = register(new ItemType("waxed_exposed_copper", Component.getBuilder().build()));
    public static ItemType WAXED_EXPOSED_COPPER_BULB = register(new ItemType("waxed_exposed_copper_bulb", Component.getBuilder().build()));
    public static ItemType WAXED_EXPOSED_COPPER_DOOR = register(new ItemType("waxed_exposed_copper_door", Component.getBuilder().build()));
    public static ItemType WAXED_EXPOSED_COPPER_GRATE = register(new ItemType("waxed_exposed_copper_grate", Component.getBuilder().build()));
    public static ItemType WAXED_EXPOSED_COPPER_TRAPDOOR = register(new ItemType("waxed_exposed_copper_trapdoor", Component.getBuilder().build()));
    public static ItemType WAXED_EXPOSED_CUT_COPPER = register(new ItemType("waxed_exposed_cut_copper", Component.getBuilder().build()));
    public static ItemType WAXED_EXPOSED_CUT_COPPER_SLAB = register(new ItemType("waxed_exposed_cut_copper_slab", Component.getBuilder().build()));
    public static ItemType WAXED_EXPOSED_CUT_COPPER_STAIRS = register(new ItemType("waxed_exposed_cut_copper_stairs", Component.getBuilder().build()));
    public static ItemType WAXED_OXIDIZED_CHISELED_COPPER = register(new ItemType("waxed_oxidized_chiseled_copper", Component.getBuilder().build()));
    public static ItemType WAXED_OXIDIZED_COPPER = register(new ItemType("waxed_oxidized_copper", Component.getBuilder().build()));
    public static ItemType WAXED_OXIDIZED_COPPER_BULB = register(new ItemType("waxed_oxidized_copper_bulb", Component.getBuilder().build()));
    public static ItemType WAXED_OXIDIZED_COPPER_DOOR = register(new ItemType("waxed_oxidized_copper_door", Component.getBuilder().build()));
    public static ItemType WAXED_OXIDIZED_COPPER_GRATE = register(new ItemType("waxed_oxidized_copper_grate", Component.getBuilder().build()));
    public static ItemType WAXED_OXIDIZED_COPPER_TRAPDOOR = register(new ItemType("waxed_oxidized_copper_trapdoor", Component.getBuilder().build()));
    public static ItemType WAXED_OXIDIZED_CUT_COPPER = register(new ItemType("waxed_oxidized_cut_copper", Component.getBuilder().build()));
    public static ItemType WAXED_OXIDIZED_CUT_COPPER_SLAB = register(new ItemType("waxed_oxidized_cut_copper_slab", Component.getBuilder().build()));
    public static ItemType WAXED_OXIDIZED_CUT_COPPER_STAIRS = register(new ItemType("waxed_oxidized_cut_copper_stairs", Component.getBuilder().build()));
    public static ItemType WAXED_WEATHERED_CHISELED_COPPER = register(new ItemType("waxed_weathered_chiseled_copper", Component.getBuilder().build()));
    public static ItemType WAXED_WEATHERED_COPPER = register(new ItemType("waxed_weathered_copper", Component.getBuilder().build()));
    public static ItemType WAXED_WEATHERED_COPPER_BULB = register(new ItemType("waxed_weathered_copper_bulb", Component.getBuilder().build()));
    public static ItemType WAXED_WEATHERED_COPPER_DOOR = register(new ItemType("waxed_weathered_copper_door", Component.getBuilder().build()));
    public static ItemType WAXED_WEATHERED_COPPER_GRATE = register(new ItemType("waxed_weathered_copper_grate", Component.getBuilder().build()));
    public static ItemType WAXED_WEATHERED_COPPER_TRAPDOOR = register(new ItemType("waxed_weathered_copper_trapdoor", Component.getBuilder().build()));
    public static ItemType WAXED_WEATHERED_CUT_COPPER = register(new ItemType("waxed_weathered_cut_copper", Component.getBuilder().build()));
    public static ItemType WAXED_WEATHERED_CUT_COPPER_SLAB = register(new ItemType("waxed_weathered_cut_copper_slab", Component.getBuilder().build()));
    public static ItemType WAXED_WEATHERED_CUT_COPPER_STAIRS = register(new ItemType("waxed_weathered_cut_copper_stairs", Component.getBuilder().build()));
    public static ItemType WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE = register(new ItemType("wayfinder_armor_trim_smithing_template", Component.getBuilder().build()));
    public static ItemType WEATHERED_CHISELED_COPPER = register(new ItemType("weathered_chiseled_copper", Component.getBuilder().build()));
    public static ItemType WEATHERED_COPPER = register(new ItemType("weathered_copper", Component.getBuilder().build()));
    public static ItemType WEATHERED_COPPER_BULB = register(new ItemType("weathered_copper_bulb", Component.getBuilder().build()));
    public static ItemType WEATHERED_COPPER_DOOR = register(new ItemType("weathered_copper_door", Component.getBuilder().build()));
    public static ItemType WEATHERED_COPPER_GRATE = register(new ItemType("weathered_copper_grate", Component.getBuilder().build()));
    public static ItemType WEATHERED_COPPER_TRAPDOOR = register(new ItemType("weathered_copper_trapdoor", Component.getBuilder().build()));
    public static ItemType WEATHERED_CUT_COPPER = register(new ItemType("weathered_cut_copper", Component.getBuilder().build()));
    public static ItemType WEATHERED_CUT_COPPER_SLAB = register(new ItemType("weathered_cut_copper_slab", Component.getBuilder().build()));
    public static ItemType WEATHERED_CUT_COPPER_STAIRS = register(new ItemType("weathered_cut_copper_stairs", Component.getBuilder().build()));
    public static ItemType WEEPING_VINES = register(new ItemType("weeping_vines", Component.getBuilder().build()));
    public static ItemType WET_SPONGE = register(new ItemType("wet_sponge", Component.getBuilder().build()));
    public static ItemType WHEAT = register(new ItemType("wheat", Component.getBuilder().build()));
    public static ItemType WHEAT_SEEDS = register(new ItemType("wheat_seeds", Component.getBuilder().build()));
    public static ItemType WHITE_BANNER = register(new ItemType("white_banner", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType WHITE_BED = register(new ItemType("white_bed", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType WHITE_CANDLE = register(new ItemType("white_candle", Component.getBuilder().build()));
    public static ItemType WHITE_CARPET = register(new ItemType("white_carpet", Component.getBuilder().build()));
    public static ItemType WHITE_CONCRETE = register(new ItemType("white_concrete", Component.getBuilder().build()));
    public static ItemType WHITE_CONCRETE_POWDER = register(new ItemType("white_concrete_powder", Component.getBuilder().build()));
    public static ItemType WHITE_DYE = register(new ItemType("white_dye", Component.getBuilder().build()));
    public static ItemType WHITE_GLAZED_TERRACOTTA = register(new ItemType("white_glazed_terracotta", Component.getBuilder().build()));
    public static ItemType WHITE_SHULKER_BOX = register(new ItemType("white_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType WHITE_STAINED_GLASS = register(new ItemType("white_stained_glass", Component.getBuilder().build()));
    public static ItemType WHITE_STAINED_GLASS_PANE = register(new ItemType("white_stained_glass_pane", Component.getBuilder().build()));
    public static ItemType WHITE_TERRACOTTA = register(new ItemType("white_terracotta", Component.getBuilder().build()));
    public static ItemType WHITE_TULIP = register(new ItemType("white_tulip", Component.getBuilder().build()));
    public static ItemType WHITE_WOOL = register(new ItemType("white_wool", Component.getBuilder().build()));
    public static ItemType WILD_ARMOR_TRIM_SMITHING_TEMPLATE = register(new ItemType("wild_armor_trim_smithing_template", Component.getBuilder().build()));
    public static ItemType WIND_CHARGE = register(new ItemType("wind_charge", Component.getBuilder().build()));
    public static ItemType WITCH_SPAWN_EGG = register(new ItemType("witch_spawn_egg", Component.getBuilder().build()));
    public static ItemType WITHER_ROSE = register(new ItemType("wither_rose", Component.getBuilder().build()));
    public static ItemType WITHER_SKELETON_SKULL = register(new ItemType("wither_skeleton_skull", Component.getBuilder().setRarity(Rarity.UNCOMMON).build()));
    public static ItemType WITHER_SKELETON_SPAWN_EGG = register(new ItemType("wither_skeleton_spawn_egg", Component.getBuilder().build()));
    public static ItemType WITHER_SPAWN_EGG = register(new ItemType("wither_spawn_egg", Component.getBuilder().build()));
    public static ItemType WOLF_ARMOR = register(new ItemType("wolf_armor", Component.getBuilder().setMaxDamage(64).setMaxStackSize(1).build()));
    public static ItemType WOLF_SPAWN_EGG = register(new ItemType("wolf_spawn_egg", Component.getBuilder().build()));
    public static ItemType WOODEN_AXE = register(new ItemType("wooden_axe", Component.getBuilder().setMaxDamage(59).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_wooden_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/axe"), true, 2.0d)).setDamagePerBlock(2)).build()));
    public static ItemType WOODEN_HOE = register(new ItemType("wooden_hoe", Component.getBuilder().setMaxDamage(59).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_wooden_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/hoe"), true, 2.0d)).setDamagePerBlock(2)).build()));
    public static ItemType WOODEN_PICKAXE = register(new ItemType("wooden_pickaxe", Component.getBuilder().setMaxDamage(59).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_wooden_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/pickaxe"), true, 2.0d)).setDamagePerBlock(2)).build()));
    public static ItemType WOODEN_SHOVEL = register(new ItemType("wooden_shovel", Component.getBuilder().setMaxDamage(59).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("#minecraft:incorrect_for_wooden_tool"), false, 2.0d), new ToolRule(List.of("#minecraft:mineable/shovel"), true, 2.0d)).setDamagePerBlock(2)).build()));
    public static ItemType WOODEN_SWORD = register(new ItemType("wooden_sword", Component.getBuilder().setMaxDamage(59).setMaxStackSize(1).setTool(new Tool(new ToolRule(List.of("minecraft:cobweb"), true, 15.0d), new ToolRule(List.of("#minecraft:sword_efficient"), false, 1.5d)).setDamagePerBlock(2)).build()));
    public static ItemType WRITABLE_BOOK = register(new ItemType("writable_book", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType WRITTEN_BOOK = register(new ItemType("written_book", Component.getBuilder().setMaxStackSize(16).setEnchantmentGlintOverride(true).build()));
    public static ItemType YELLOW_BANNER = register(new ItemType("yellow_banner", Component.getBuilder().setMaxStackSize(16).build()));
    public static ItemType YELLOW_BED = register(new ItemType("yellow_bed", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType YELLOW_CANDLE = register(new ItemType("yellow_candle", Component.getBuilder().build()));
    public static ItemType YELLOW_CARPET = register(new ItemType("yellow_carpet", Component.getBuilder().build()));
    public static ItemType YELLOW_CONCRETE = register(new ItemType("yellow_concrete", Component.getBuilder().build()));
    public static ItemType YELLOW_CONCRETE_POWDER = register(new ItemType("yellow_concrete_powder", Component.getBuilder().build()));
    public static ItemType YELLOW_DYE = register(new ItemType("yellow_dye", Component.getBuilder().build()));
    public static ItemType YELLOW_GLAZED_TERRACOTTA = register(new ItemType("yellow_glazed_terracotta", Component.getBuilder().build()));
    public static ItemType YELLOW_SHULKER_BOX = register(new ItemType("yellow_shulker_box", Component.getBuilder().setMaxStackSize(1).build()));
    public static ItemType YELLOW_STAINED_GLASS = register(new ItemType("yellow_stained_glass", Component.getBuilder().build()));
    public static ItemType YELLOW_STAINED_GLASS_PANE = register(new ItemType("yellow_stained_glass_pane", Component.getBuilder().build()));
    public static ItemType YELLOW_TERRACOTTA = register(new ItemType("yellow_terracotta", Component.getBuilder().build()));
    public static ItemType YELLOW_WOOL = register(new ItemType("yellow_wool", Component.getBuilder().build()));
    public static ItemType ZOGLIN_SPAWN_EGG = register(new ItemType("zoglin_spawn_egg", Component.getBuilder().build()));
    public static ItemType ZOMBIE_HEAD = register(new ItemType("zombie_head", Component.getBuilder().setRarity(Rarity.UNCOMMON).build()));
    public static ItemType ZOMBIE_HORSE_SPAWN_EGG = register(new ItemType("zombie_horse_spawn_egg", Component.getBuilder().build()));
    public static ItemType ZOMBIE_SPAWN_EGG = register(new ItemType("zombie_spawn_egg", Component.getBuilder().build()));
    public static ItemType ZOMBIE_VILLAGER_SPAWN_EGG = register(new ItemType("zombie_villager_spawn_egg", Component.getBuilder().build()));
    public static ItemType ZOMBIFIED_PIGLIN_SPAWN_EGG = register(new ItemType("zombified_piglin_spawn_egg", Component.getBuilder().build()));


    public static ItemType register(ItemType item) {
        map.put(item.getIdentifier(), item);
        return item;
    }

    public static ItemType fromIdentifier(String identifier) {
        return map.get(identifier);
    }
}
